{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome","title":"Welcome \ud83d\udc4b","text":"<p>This Engineering Handbook serves as the central knowledge repository for Futured's engineering practices, standards, and workflows. It's designed to help both new and existing team members understand how we work and maintain consistency across our projects.</p> <p>We believe in open collaboration and sharing knowledge. By making our engineering handbook public, we demonstrate our commitment to quality, transparency, and continuous improvement in everything we build.</p>"},{"location":"#sections","title":"Sections","text":""},{"location":"#teams","title":"Teams","text":"<ul> <li>Android &amp; KMP - Everything about Android and Kotlin Multiplatform development</li> <li>iOS - iOS development guidelines</li> <li>Full-stack - full-stack development guidelines and best practices</li> </ul>"},{"location":"#tools-resources","title":"Tools &amp; Resources","text":"<ul> <li>Contributing - Contribution guidelines</li> </ul>"},{"location":"#contributing-to-the-handbook","title":"Contributing to the Handbook","text":"<p>This handbook is a living document that evolves with our practices. If you notice outdated information, feel free to contribute.</p> <p>We encourage all team members to contribute and keep this handbook accurate and useful.</p>"},{"location":"editors/","title":"Contributing","text":""},{"location":"editors/#contributing","title":"Contributing","text":"<p>This guide helps you contribute to the Engineering Handbook using Material for MkDocs.</p>"},{"location":"editors/#installation","title":"Installation","text":"<ol> <li> <p>Clone the repository:     </p><pre><code>git clone https://github.com/futuredapp/Engineering-Handbook.git\ncd Engineering-Handbook\n</code></pre><p></p> </li> <li> <p>Create a Virtual Environment:     </p><pre><code>python3 -m venv myenv\n</code></pre><p></p> </li> <li> <p>Activate the Virtual Environment:     </p><pre><code>source myenv/bin/activate\n</code></pre><p></p> </li> <li> <p>Install the required packages:     </p><pre><code>pip install mkdocs-material\npip install mkdocs-glightbox\n</code></pre><p></p> <p>Note</p> <p>The <code>mkdocs-material</code> and plugin dependencies must be installed in the same Python environment. Installing <code>mkdocs-material</code> from Homebrew and other plugins (<code>mkdocs-glightbox</code>) using <code>pip</code> might not work for you if you use <code>pyenv</code> or similar environment management tools.</p> </li> <li> <p>When you're done, you can deactivate the environment with:     </p><pre><code>deactivate\n</code></pre><p></p> </li> </ol>"},{"location":"editors/#local-development","title":"Local Development","text":"<ol> <li> <p>Activate the Virtual Environment:     </p><pre><code>source myenv/bin/activate\n</code></pre><p></p> </li> <li> <p>Run the following command from the repository root to start a local development server with live-reloading:     </p><pre><code>mkdocs serve\n</code></pre><p></p> <p>The documentation will be available at http://127.0.0.1:8000/Engineering-Handbook/.</p> </li> <li> <p>When you're done, you can deactivate the environment with:     </p><pre><code>deactivate\n</code></pre><p></p> </li> </ol>"},{"location":"editors/#editing-guidelines","title":"Editing Guidelines","text":""},{"location":"editors/#making-changes","title":"Making Changes","text":"<ol> <li>Create a new branch from <code>main</code></li> <li>Make your changes</li> <li>Open a pull request to the Engineering Handbook repository</li> <li>Get at least one approval before merging</li> <li>After merging, the GitHub Action Pages workflow will automatically publish the updated documentation</li> </ol>"},{"location":"editors/#diagrams","title":"Diagrams","text":"<p>Some diagrams are created using Excalidraw. When exporting images, ensure following:</p> <ul> <li>Embed scene into exported image, or commit source <code>.excalidraw</code> file to the repository so it can be edited later by someone else.</li> <li>Respect light and dark themes - export 2 images for light and dark backgrounds. Use the <code>#only-light</code> and <code>#only-dark</code> suffixes to specify which theme the image is for. See Light and dark mode for more details.</li> <li>Use the <code>data-gallery</code> attribute to group images into a light gallery. For example, <code>data-gallery=\"light\"</code> for light mode images and <code>data-gallery=\"dark\"</code> for dark mode images. This ensures that lightbox will not display dark mode images in light mode and vice versa.   Related issue: blueswen/mkdocs-glightbox/issues/26</li> </ul> <p>Full example of diagram with transparent background in light and dark variant and lightbox support:</p> <pre><code>![](../Resources/architecture/arch_kmp_light.png#only-light){data-gallery=\"light\"}\n![](../Resources/architecture/arch_kmp_dark.png#only-dark){data-gallery=\"dark\"}\n</code></pre>"},{"location":"editors/#markdown-syntax","title":"Markdown Syntax","text":"<p>Material for MkDocs uses standard Markdown with some additional features</p> <ul> <li>Admonitions:   <pre><code>!!! note \"Title\"\n    Content of the note\n</code></pre></li> </ul>"},{"location":"editors/#editing-navigation","title":"Editing Navigation","text":"<p>Edit the <code>mkdocs.yml</code> file to adjust the navigation structure.</p>"},{"location":"editors/#adding-new-pages","title":"Adding New Pages","text":"<ol> <li>Create a new Markdown file in the appropriate directory</li> <li>Add the page to navigation in <code>mkdocs.yml</code> if needed</li> </ol>"},{"location":"editors/#project-structure","title":"Project Structure","text":"<pre><code>mkdocs.yml              # Configuration file\ndocs/\n    index.md            # Documentation homepage\n    editors.md          # Editors manual\n    Teams/              # Teams space\n        Team name/\n            ...         # Pages\n            Resources/  # Images, Diagrams, etc.\n</code></pre>"},{"location":"editors/#troubleshooting","title":"Troubleshooting","text":"<p>For more detailed information, refer to the Material for MkDocs documentation.</p>"},{"location":"teams/android/","title":"Overview","text":""},{"location":"teams/android/#android-kotlin-multiplatform","title":"Android &amp; Kotlin Multiplatform","text":"<p>Welcome to the Android &amp; Kotlin Multiplatform section of the Futured Engineering Handbook. This area contains our team's guidelines, best practices, and workflows for Android and KMP development.</p>"},{"location":"teams/android/#key-sections","title":"Key Sections","text":""},{"location":"teams/android/#architecture","title":"Architecture","text":"<ul> <li>Android-native - Description of architecture we are using in Android-only apps</li> <li>Kotlin Multiplatform - Description of architecture we are using in Kotlin Multiplatform apps</li> </ul>"},{"location":"teams/android/#project-setup","title":"Project Setup","text":"<ul> <li>First Steps - How to start a new project</li> <li>GitHub Configuration - Repository settings and branch protection rules</li> <li>Project Setup - Project setup</li> <li>Firebase Setup - Everything about Firebase setup</li> <li>CI/CD Pipeline - Continuous integration and delivery</li> <li>Translations - Multilangual support in apps</li> </ul>"},{"location":"teams/android/#development","title":"Development","text":"<ul> <li>Git Flow - Our branching strategies and workflows</li> <li>Code Style - Coding conventions and standards</li> <li>Build Distribution - How we distribute QA &amp; client builds</li> </ul>"},{"location":"teams/android/#release","title":"Release","text":"<ul> <li>Google Play Account - How to setup Google Play account</li> <li>Google Play App - How to setup release app in Google Play Console</li> <li>CI/CD - How to setup CI/CD to release app to Google Play Console</li> <li>Release Process Overview - Overview of the release process</li> </ul>"},{"location":"teams/android/#getting-started","title":"Getting Started","text":"<p>If you're starting a new project, begin with the First Steps guide. For existing projects, familiarize yourself with our Git Flow and Code Style to ensure you're following team standards.</p>"},{"location":"teams/android/architecture/00_native/","title":"Android-native","text":""},{"location":"teams/android/architecture/00_native/#android-native-architecture","title":"Android-native architecture","text":"<p>This page describes architecture used in our futuredapp/android-project-template-compose repository.</p> <p>The architecture is organized into layers, each with a specific responsibility. This ensures:</p> <ul> <li>Improved code organization and maintainability</li> <li>Easier testing of individual layers</li> <li>Better scalability and adaptability</li> <li>Minimized component coupling</li> </ul> <p>We use Android Jetpack libraries to simplify development and follow modern Android best practices. These libraries help create reliable and maintainable apps.</p> <p> </p>"},{"location":"teams/android/architecture/00_native/#overall-architecture","title":"Overall Architecture","text":""},{"location":"teams/android/architecture/00_native/#user-interface","title":"User Interface","text":"<p>User Interface is written in Jetpack Compose, which is a declarative framework for creating UI and is also the official, Google-recommended way of implementing UI.</p>"},{"location":"teams/android/architecture/00_native/#presentation-layer","title":"Presentation Layer","text":"<p>At the presentation layer, we follow the MVVM design pattern, where each screen has its own ViewModel that holds the screen state and contains presentation logic. We adhere to the Unidirectional Data Flow pattern, where user actions from the UI are processed by the ViewModel, which then mutates the screen state. This screen state is then reflected back to the UI. The app uses standard Lifecycle components from androidx set of libraries.</p>"},{"location":"teams/android/architecture/00_native/#domain-layer","title":"Domain Layer","text":"<p>The domain layer implements UseCases / facades, handles the application's business logic, and communicates with other layers using Kotlin Coroutines. We developed futuredapp/arkitekt to help with this.</p> <p>UseCases provide a clean API for the presentation layer by interacting with repositories and services. Each UseCase is tied to the ViewModel's lifecycle Coroutine scope to ensure proper cancellation.</p>"},{"location":"teams/android/architecture/00_native/#data-layer","title":"Data Layer","text":"<p>The final - data layer holds the global application state, implements caching, and provides the domain layer with access to various data sources (e.g., database, API service, etc.). The entire data layer is observable (this enables automatic UI updates when data changes) and should act as a Single Source of Truth to other layers.</p> <p>All components in the application are injectable using a Dependency Injection (DI) framework. We use Dagger Hilt by default. The DI also allows individual components to be tested separately using Unit tests.</p>"},{"location":"teams/android/architecture/10_kmp/","title":"Kotlin Multiplatform","text":""},{"location":"teams/android/architecture/10_kmp/#kotlin-multiplatform-architecture","title":"Kotlin Multiplatform Architecture","text":"<p>This page describes the Kotlin Multiplatform architecture used in our futuredapp/kmp-futured-template repository that targets Android and iOS platforms.</p> <p>Our architecture focuses on high code sharing between platforms while respecting platform-specific best practices for user experience.</p> <p>The architecture is organized into layers, each with a specific responsibility, and utilizes a shared codebase where possible. This ensures:</p> <ul> <li>Improved code organization and maintainability</li> <li>Easier testing of individual layers</li> <li>Better scalability and adaptability</li> <li>Minimized component coupling</li> </ul> <p> </p>"},{"location":"teams/android/architecture/10_kmp/#overall-architecture","title":"Overall Architecture","text":"<p>The architecture follows a multi-layered approach with platform-specific UI implementations on top of a shared KMP codebase.</p> <p>User Interface is platform-specific, using Jetpack Compose on Android  and SwiftUI on iOS.  This approach leverages each platform's native UI capabilities while maintaining a consistent user experience.</p> <p>Presentation Layer follows an MVI-like pattern using Decompose for sharing presentation logic and navigation state. Components manage state, process events, and handle navigation across both platforms. The state is exposed to the UI using Kotlin StateFlow.</p> <p>The domain layer implements UseCases / facades, handles the application's business logic, and communicates with other layers using Kotlin Coroutines.</p> <p>Data Layer holds the application state, provides caching, and gives the domain layer access to various data sources (network, local storage). It acts as a Single Source of Truth for the application.</p>"},{"location":"teams/android/architecture/10_kmp/#key-components","title":"Key Components","text":""},{"location":"teams/android/architecture/10_kmp/#decompose-components","title":"Decompose Components","text":"<p>The core of the presentation layer is built around Decompose components:</p> <ul> <li><code>BaseComponent</code>: Foundation for all components that handles state management, lifecycle, and UI events</li> <li><code>AppComponent</code>: Base for application-level components that don't require navigation</li> <li><code>ScreenComponent</code>: Base for screen components that implement navigation actions</li> </ul> <p>Components follow a unidirectional data flow where:</p> <ol> <li>UI triggers actions</li> <li>Components process actions</li> <li>State is updated and flows back to the UI</li> <li>One-shot UI events are dispatched when needed</li> </ol>"},{"location":"teams/android/architecture/10_kmp/#navigation-system","title":"Navigation System","text":"<p>Navigation state is fully shared in KMP and is implemented using Decompose's powerful navigation models such as ChildStack and ChildSlot, which provide type-safe, state-based navigation.</p> <ul> <li>NavHosts: Navigation is structured into several navigation trees. Each root of the tree is a Component which holds and manages state for its children. We call them NavHosts.</li> <li>Navigation Actions: Screen Components expose navigation interfaces that decouple UI from navigation logic. NavHosts implement these interfaces to manage navigation state. </li> <li>Deep Linking: Native deep link intents/URLs are processed through a resolver that maps them to the appropriate navigation state.</li> </ul> <p>This state-based approach allows navigation to be fully reactive, serializable, and recoverable after process death or configuration changes. The navigation structure is shared between platforms, allowing for consistent user flows while respecting platform UI conventions.</p>"},{"location":"teams/android/architecture/10_kmp/#usecases","title":"UseCases","text":"<p>The domain layer operates through UseCases that encapsulate business logic:</p> <ul> <li><code>UseCase</code>: For single-value operations</li> <li><code>FlowUseCase</code>: For streaming data updates using Kotlin Coroutines Flow</li> </ul> <p>Use Cases provide a clean API for the presentation layer by interacting with repositories and services. Each UseCase is tied to the screen Component's lifecycle Coroutine scope to ensure proper cancellation.</p> <p>Our KMP architecture forks implementation from our futuredapp/arkitekt.</p>"},{"location":"teams/android/architecture/10_kmp/#dependency-injection","title":"Dependency Injection","text":"<p>Koin is used for dependency injection across the codebase with:</p> <ul> <li>Annotation-based approach for module definition using Koin annotations</li> <li>Assisted injection for Decompose Components, simplified with our KSP compiler</li> <li>Platform-specific module overrides where needed</li> </ul>"},{"location":"teams/android/architecture/10_kmp/#ios-interop-layer","title":"iOS Interop Layer","text":"<p>While the Android app interacts with shared code directly, the iOS uses:</p> <ul> <li>SKIE for improved Kotlin-Swift interop</li> <li>Swift wrappers around Kotlin StateFlows</li> <li>Swift ViewModels that adapt Kotlin components to SwiftUI</li> </ul>"},{"location":"teams/android/architecture/10_kmp/#shared-resources","title":"Shared Resources","text":"<p>We use moko-resources for sharing strings and other resources. The <code>StringDesc</code> interface allows us to provide strings to the platform directly from KMP state in platform-agnostic way. This allows us to format strings directly in KMP code which ensures that strings are displayed on both platforms the same.</p>"},{"location":"teams/android/architecture/10_kmp/#platform-integration","title":"Platform Integration","text":""},{"location":"teams/android/architecture/10_kmp/#android-integration","title":"Android Integration","text":"<p>Android consumes KMP code as a standard library module - from Android perspective, the shared code is just another Gradle dependency.</p>"},{"location":"teams/android/architecture/10_kmp/#ios-integration","title":"iOS Integration","text":"<p>iOS integration is accomplished through:</p> <ul> <li>Swift Package wrapping a static KMP XCFramework</li> <li>Swift property wrappers that adapt Kotlin StateFlows to SwiftUI StateObjects</li> </ul>"},{"location":"teams/android/architecture/10_kmp/#platform-bindings","title":"Platform Bindings","text":"<p>Sometimes we need to execute platform-specific code in shared code. We use platform bindings for this purpose.</p> <p>The platform binding is a Kotlin interface that is implemented on all platforms and provided to KMP during initialization.</p> <p>We use this pattern for accessing native functionality not available in Kotlin common code:</p> <ul> <li>Device information (OS version, device model)</li> <li>Platform services (crash reporting, analytics)</li> <li>Notification services</li> <li>etc.</li> </ul>"},{"location":"teams/android/development/00_git_flow/","title":"Git Flow","text":""},{"location":"teams/android/development/00_git_flow/#git-flow","title":"Git Flow","text":"<p>To ensure smooth collaboration on a project with a large team of developers and to ensure the correct functioning of our CI/CD and Jira integration tools, we have a small set of rules and recommendations to follow in addition to standard Git Flow rules.</p>"},{"location":"teams/android/development/00_git_flow/#base-branches","title":"Base Branches","text":"<p>main (formerly master):</p> <ul> <li>The production branch, containing features and fixes that are available in the released version of the app.</li> </ul> <p>develop:</p> <ul> <li>Contains the latest features and fixes that are provided to QA for testing purposes. All features go to this branch before release.</li> </ul>"},{"location":"teams/android/development/00_git_flow/#feature-and-fix-branches","title":"Feature and Fix Branches","text":""},{"location":"teams/android/development/00_git_flow/#branch-naming-convention","title":"Branch Naming Convention","text":"<p>Feature and fix branches should follow a strict naming convention so our Jira integration works and tasks are moved automatically.</p> <p>Feature branch:</p> <ul> <li>Used when a new feature is developed.</li> <li>Pattern:      <pre><code>feature/&lt;jira-ticket-id&gt;-&lt;short-description-in-kebab-case&gt;\n</code></pre></li> </ul> <p>Fix branch:</p> <ul> <li>Used when the related Jira task is a bug task.</li> <li>Pattern:     <pre><code>fix/&lt;jira-ticket-id&gt;-&lt;short-description-in-kebab-case&gt;\n</code></pre></li> </ul> <p>Hotfix branch:</p> <ul> <li>Used when we need to deploy a fix to already released code.</li> <li>Pattern:     <pre><code>hotfix/&lt;jira-ticket-id&gt;-&lt;short-description-in-kebab-case&gt;\n</code></pre></li> </ul> <p>When a correctly named branch is pushed to GitHub, the related Jira task will be moved to the \"in progress\" state.</p>"},{"location":"teams/android/development/00_git_flow/#commit-message-convention","title":"Commit Message Convention","text":"<p>Commit messages should be written in English in present simple tense. They should start with one of the following prefixes (depending on the purpose of the commit), followed by a brief description:</p> <ul> <li><code>Feat:</code> \u2014 prefix for feature commits (new feature is implemented or modified)</li> <li><code>Fix:</code> \u2014 prefix for fix commits (fixing a bug task or fixing part of code that was not working as expected)</li> <li><code>Chore:</code> \u2014 prefix for commits improving or fixing code style (no functional changes)</li> </ul> <p>Example: </p><pre><code>Feat: add pull to refresh implementation on dashboard screen\n</code></pre><p></p>"},{"location":"teams/android/development/00_git_flow/#pull-request-convention","title":"Pull Request Convention","text":""},{"location":"teams/android/development/00_git_flow/#naming","title":"Naming","text":"<p>Similarly to branch naming, pull request naming also contributes to Jira integration.</p> <ul> <li>Pattern: <pre><code>&lt;jira-ticket-id&gt; short description of the task\n</code></pre></li> </ul> <p>When a correctly named Pull Request is created, the related Jira task is moved to the \"Review\" state. Once the PR is merged, the task is moved to the \"Testing\" state.</p>"},{"location":"teams/android/development/00_git_flow/#description","title":"Description","text":"<p>In general, the PR description is optional. If you want to help your colleagues with code review, you can include a description of the changes you have made and even add a few screenshots.</p>"},{"location":"teams/android/development/00_git_flow/#base-branch","title":"Base Branch","text":"<ul> <li>Feature and fix branches should be based on the <code>develop</code> branch, so the pull request should also target the <code>develop</code> branch.</li> <li>The hotfix branch, however, is created from the <code>main</code> branch and the PR should therefore target the <code>main</code> branch.</li> <li>After merging the hotfix PR into the <code>main</code> branch, it is necessary to merge the <code>main</code> branch into <code>develop</code> so that the hotfix is propagated to the entire codebase.</li> </ul>"},{"location":"teams/android/development/00_git_flow/#pr-check","title":"PR Check","text":"<p>Our pull requests are automatically checked by GitHub Actions to ensure code quality and convention standards. If the PR does not comply with the rules, Danger will report the issues as a comment on the related PR, so the shortcomings can be fixed.</p>"},{"location":"teams/android/development/10_code_style/","title":"Code Style","text":""},{"location":"teams/android/development/10_code_style/#code-style","title":"Code Style","text":"<p>In our effort to maintain a consistent code style across all our projects, we have integrated multiple tools that verify our code both in the Android Studio and during Pull Request (PR) verification.</p> <p>The tools we use are consistent across both Android-only and Kotlin Multiplatform (KMP) projects.</p>"},{"location":"teams/android/development/10_code_style/#tools","title":"Tools","text":""},{"location":"teams/android/development/10_code_style/#ktlint","title":"KtLint","text":"<p>KtLint is an anti-bikeshedding Kotlin linter with a built-in formatter. It enforces a consistent code style and can report or automatically fix deviations from this style.</p> <p>We use this Gradle plugin for integration, which provides the following useful tasks:</p> <ul> <li><code>ktLintCheck</code>: Scans the entire project for issues (used for PR checks).</li> <li><code>ktLintFormat</code>: Works similarly to <code>ktLintCheck</code>, but also formats what is possible. Use this before making commits to ensure correct formatting.</li> </ul> <p>KtLint also offers an IDEA plugin that can format code either automatically or when triggered by the format code command. The use of this plugin is optional.</p> <p>In our projects, we use <code>.editorconfig</code> to unify code formatting between IDE and KtLint.</p>"},{"location":"teams/android/development/10_code_style/#editorconfig","title":".editorconfig","text":"<p>.editorconfig helps maintain consistent coding styles across different environments. Every project includes one in the root directory.</p> <p>Link to current config</p>"},{"location":"teams/android/development/10_code_style/#android-lint","title":"Android Lint","text":"<p>Android Lint is a scanning tool provided by Android, designed to check source files for potential bugs and optimization improvements regarding correctness, security, performance, usability, accessibility, and internationalization.</p> <p>All rules are specified in the <code>lint.xml</code> file in the root directory.</p>"},{"location":"teams/android/development/10_code_style/#compose-lints","title":"Compose Lints","text":"<p>Compose Lints is an experimental lint-checks tool for Jetpack Compose. It helps to adhere to best practices and avoid common pitfalls when using Compose.</p> <p>Just like Android Lint, it includes additional rules in the <code>lint.xml</code> file.</p> <p>Link to current config</p>"},{"location":"teams/android/development/10_code_style/#detekt","title":"Detekt","text":"<p>Detekt is a static code analysis tool for Kotlin. It operates on the abstract syntax tree provided by the Kotlin compiler and can detect issues like code complexity, duplications, and naming conventions, among others.</p> <p>The config file is located at <code>config/detekt.yml</code>.</p> <p>Link to current config</p>"},{"location":"teams/android/development/10_code_style/#danger","title":"Danger","text":"<p>Danger provides an easier way to craft Continuous Integration scripts. It runs during your CI, and automates common code review chores, hence providing additional continuous integration and enforcement of specific standards before merging any code.</p> <p>Each repository should have its own <code>Dangerfile</code>, adapted to specific needs. We also apply company-wide danger rules across all our projects. The <code>Dangerfile</code> refers to these rules.</p>"},{"location":"teams/android/development/10_code_style/#how-to-be-a-good-developer","title":"How to be a good developer","text":"<ol> <li>Set your Android Studio code style to the default settings - let <code>.editorconfig</code> define your IDE's formatting style.</li> <li>Either install the KtLint IDEA plugin or run the <code>ktLintFormat</code> gradle task before making a commit.</li> <li>When you are ready to create a PR, ensure you run the <code>lintCheck</code> gradle task first and fix any reported issues to keep the codebase clean.</li> <li>During a PR check, the <code>lintCheck</code> gradle task is run again to catch any remaining issues, which are then reported by Danger.</li> </ol>"},{"location":"teams/android/development/20_build_distrubution/","title":"Build Distribution","text":""},{"location":"teams/android/development/20_build_distrubution/#build-distribution","title":"Build distribution","text":"<p>To distribute test builds among QA and our clients, we use Firebase App Distribution service. So far, a new Android build is created after each merge into the \"develop\" branch in project repositories. These builds are usually marked as \"Enterprise\" builds. Configuration of the target API environment may vary, but usually, it uses Staging or Dev variants. The main difference from DEV builds is that this build is not debuggable, and R8/ProGuard minification and obfuscation are enabled during the build process. The Enterprise build should behave from a security and performance perspective just like the Release build that will be deployed to Google Play. Enterprise builds should have fully configured analytics and Crashlytics services as there is no other way to investigate possible issues found during the testing phase.</p>"},{"location":"teams/android/development/20_build_distrubution/#qa-builds","title":"QA builds","text":"<p>Generally speaking, QA builds are the same builds as those provided to clients, except that QA has access to all builds as the QA group is automatically assigned to all builds deployed from CI.</p>"},{"location":"teams/android/development/20_build_distrubution/#client-builds","title":"Client builds","text":"<p>Clients are provided with builds approved by QA for further testing and validation.</p>"},{"location":"teams/android/development/20_build_distrubution/#installing-test-builds","title":"Installing test builds","text":"<p>There are two ways to install an app from Firebase App Distribution: either using the web interface or installing the Firebase App Tester app, which will be offered to the users once they access a test build from an Android mobile device.</p>"},{"location":"teams/android/project_setup/00_new_repo/","title":"First Steps","text":""},{"location":"teams/android/project_setup/00_new_repo/#first-steps","title":"First Steps","text":""},{"location":"teams/android/project_setup/00_new_repo/#creating-a-repository","title":"Creating a Repository","text":"<p>Create a new private repository by using one of the project templates, depending on the project type:</p> <ul> <li>futuredapp/kmp-futured-template for Kotlin Multiplatform (KMP) projects</li> <li>futuredapp/android-project-template-compose for Android-only projects</li> </ul>"},{"location":"teams/android/project_setup/00_new_repo/#repository-naming","title":"Repository Naming","text":"<p>When creating a new repository, follow the naming convention:</p> <ul> <li>KMP: <code>&lt;project-name&gt;-kmp</code></li> <li>Android-only: <code>&lt;project-name&gt;-android</code></li> </ul>"},{"location":"teams/android/project_setup/00_new_repo/#owner","title":"Owner","text":"<p>Set owner to <code>futured.app</code></p>"},{"location":"teams/android/project_setup/10_github/","title":"GitHub","text":""},{"location":"teams/android/project_setup/10_github/#github-settings","title":"GitHub Settings","text":"<p>Let's set up a GitHub repository for your project.</p>"},{"location":"teams/android/project_setup/10_github/#general-settings","title":"General Settings","text":"<p>First, let's start by configuring basic repository settings in <code>Settings &gt; General</code>:</p> <ol> <li>Create a <code>develop</code> branch from <code>main</code> and set it as the default branch.</li> <li> <p>Disable all features: Wikis, Issues, Sponsorships, Discussions and Projects.</p> <p></p> </li> <li> <p>Pull Request settings: </p> <ul> <li>Enable Allow merge commits</li> </ul> <p></p> <ul> <li>Enable Always suggest updating pull request branches.</li> <li>Enable Allow auto-merge.</li> <li>Enable Automatically delete head branches so there is no need to delete branches manually after each PR merge.</li> </ul> <p></p> </li> </ol>"},{"location":"teams/android/project_setup/10_github/#branch-rulesets","title":"Branch Rulesets","text":"<p>Branch rulesets are important for protecting your codebase and ensuring code quality. They prevent accidental or unauthorized changes to the <code>develop</code> and <code>main</code> branches.</p> <p>What is required:</p> <ul> <li>Pull requests are the only way to merge new code to any of the protected branches.</li> <li>Pull requests must be reviewed by at least one person (this rule can be adjusted based on the project).</li> <li>Status checks (CI) must pass before merging.</li> </ul>"},{"location":"teams/android/project_setup/10_github/#configuration","title":"Configuration","text":"<p>Open <code>Settings &gt; Rules</code> and click <code>New Ruleset &gt; New branch ruleset</code>.</p> <ol> <li>Name: \"Pull Requests\".</li> <li>Target branches:<ul> <li>Default branch (Include default branch).</li> <li><code>main</code> branch (Include by pattern).</li> </ul> </li> <li> <p>Branch rules</p> <ul> <li>Enable Restrict deletions.</li> <li> <p>Enable Require a pull request before merging. Then under Additional settings:</p> <ul> <li>Set Required approvals: <code>1</code> or more (this might be project-specific).</li> <li>Enable Dismiss stale pull request approvals when new commits are pushed (this might be project-specific).</li> </ul> <p></p> </li> <li> <p>Enable Block force pushes.</p> </li> <li> <p>Enable Require status checks to pass. Then under Additional settings:</p> <ul> <li>Select all CI status checks that run for pull requests.</li> </ul> <p>Tip</p> <p>Status checks become visible after they have been run at least once (after the first created pull request). Do not forget to set them afterwards.</p> <p></p> </li> </ul> </li> <li> <p>Do not forget set Enforcement status to Active.</p> </li> </ol>"},{"location":"teams/android/project_setup/20_project/","title":"Project","text":""},{"location":"teams/android/project_setup/20_project/#project-setup","title":"Project setup","text":"<p>Let's set up a project before starting to code.</p> <ol> <li>Load the project in Android Studio: New / Project from Version Control.</li> <li>Create a new branch <code>feature/project-setup</code> from <code>develop</code>.</li> <li>Update the project description in <code>README.md</code>.</li> </ol>"},{"location":"teams/android/project_setup/20_project/#kmp","title":"KMP","text":"<p>This is relatively straightforward, as most of the setup is handled by the init script:</p> <ol> <li>Follow the instructions in the repository, which include running the init script that will set up the application ID, package naming, and other settings.</li> <li>Update the <code>ProjectSettings.kt</code> and <code>ProductFlavors.kt</code> to your specific needs.</li> </ol>"},{"location":"teams/android/project_setup/20_project/#android-only","title":"Android only","text":"<ol> <li>Update <code>applicationId</code>, <code>compile/target/minSdk</code>, etc. in <code>ProjectSettings.kt</code></li> <li>Change packages from <code>app.futured.androidprojecttemplate</code> to real packages based on <code>applicationId</code>:<ul> <li>Change the project preview in Android Studio from <code>Android</code> to <code>Project</code>.</li> <li>Find your package, typically <code>app/main/androidprojecttemplate</code>.</li> <li>Right-click and select Refactor / Rename.<ul> <li>Android Studio won't be able to refactor everything. The rest needs to be refactored manually. Search and replace <code>androidprojecttemplate</code> with the new package name manually.</li> <li>Android Studio sometimes keeps empty folders of the old package name. Search for them and remove them manually.</li> <li>To check if refactoring was successful, run: <ul> <li><code>./gradlew --continue lintCheck</code></li> <li><code>./gradlew assembleDevDebug</code></li> </ul> </li> </ul> </li> </ul> </li> <li>Commit changes and create the first PR to <code>develop</code>.</li> <li>If the PR was successful, Status checks will be visible now. See Require status checks to pass in the Branch Rulesets / Configuration section.</li> </ol>"},{"location":"teams/android/project_setup/30_firebase/","title":"Firebase","text":""},{"location":"teams/android/project_setup/30_firebase/#firebase","title":"Firebase","text":"<p>Our mobile application projects use a dual Firebase setup, meaning there are ideally two Firebase projects - one for the development environment and one for the production environment.</p> <p>Why two Firebase projects?</p> <p>Separate dev and prod Firebase projects provide several benefits:</p> <ul> <li>Clean Analytics: Developer testing won't contaminate real user data.</li> <li>Access Control: You can control who accesses each environment, limiting who can touch production while letting developers work freely in the dev environment.</li> <li>Safe Testing: Test notifications without reaching real users. Experiment with remote config in development first.</li> <li>Environment Consistency: Many third-party services themselves split their environments into development and production, allowing you to connect to their test/sandbox accounts in your dev environment while using real/production accounts in your production environment.</li> </ul> <p>This separation creates a safety buffer between development activities and your production users.</p> <p>During project setup, you either need to create new Firebase projects or gain access to existing project(s) from the client.</p>"},{"location":"teams/android/project_setup/30_firebase/#new-project","title":"New project","text":"<p>Create new Dev and Prod projects using ops@futured.app email and invite all necessary collaborators with roles set using principle of least privilege.</p> <p>When creating new projects, follow the naming convention:</p> <ul> <li>Dev project: <code>&lt;Project Name&gt; - Dev</code></li> <li>Production project: <code>&lt;Project Name&gt;</code></li> </ul> <p>For production project in <code>Project settings &gt; General</code>, set the Environment type to <code>Production</code>.</p> <p></p> <p>Firebase vs. Google Cloud</p> <p>Each Firebase project comes with Google Cloud project. When working with 3rd party integrations which require you to integrate with Google Cloud, be aware of this and use existing Google Cloud project if possible.</p> <p>Example: For setting up Google Sheets API key for localizations, create this key in dev Firebase Google Cloud project. For setting up Google Play developer API in CI/CD, use production Firebase Google Cloud project.</p>"},{"location":"teams/android/project_setup/30_firebase/#existing-project","title":"Existing project","text":"<p>If there's an existing Firebase project, request that the client invite ops@futured.app ideally with project owner permissions, or at least with permissions to add members and manage necessary Firebase features.</p> <p>If only one project exists, treat it as the Production environment. In this case, create a new Development project following the guidelines in the New project section to maintain our dual-environment approach.</p>"},{"location":"teams/android/project_setup/30_firebase/#applications-setup","title":"Applications setup","text":"<p>Integrate Firebase into the application by following official docs.</p> <p>There should be 3 application build types, where <code>debug</code> and <code>enterprise</code> have an applicationId suffix. Register these apps in Firebase:</p> <ul> <li><code>debug</code><ul> <li>applicationId suffix <code>debug</code> (eg. <code>app.futured.kmptemplate.debug</code>)</li> <li>register app in Dev Firebase project</li> </ul> </li> <li><code>enterprise</code><ul> <li>applicationId suffix <code>enterprise</code> (eg. <code>app.futured.kmptemplate.enterprise</code>)</li> <li>register app in Dev Firebase project</li> </ul> </li> <li><code>release</code><ul> <li>no suffix</li> <li>register app in Production Firebase project</li> </ul> </li> </ul>"},{"location":"teams/android/project_setup/30_firebase/#sha-certificate-fingerprints","title":"SHA certificate fingerprints","text":"<p>Each application in Firebase must have SHA fingerprints configured.</p>"},{"location":"teams/android/project_setup/30_firebase/#debug-enterprise-app","title":"Debug + Enterprise app","text":"<p>Fingerprints can be obtained from the debug keystore.</p> <p>Tip</p> <p>You can get the SHA-1 by running <code>keytool -list -v -keystore debug.keystore -alias androiddebugkey -storepass android</code>. Adjust file paths.</p>"},{"location":"teams/android/project_setup/30_firebase/#release-app","title":"Release app","text":"<p>You will probably be using Play App Signing to sign the release build of your app. Don't forget to fill in the SHA-1 later. You'll be able to find the SHA-1 in the Google Play Console.</p> <p>Please refer to the Google Play setup page for more info.</p>"},{"location":"teams/android/project_setup/30_firebase/#firebase-features","title":"Firebase features","text":"<p>By default, each project must use Firebase App Distribution. We use Firebase App Distribution to distribute builds for QA and clients. Refer to the Build distribution page for more info.</p>"},{"location":"teams/android/project_setup/30_firebase/#firebase-app-distribution","title":"Firebase App Distribution","text":"<p>Enable Firebase App Distribution in Dev Firebase project for Enterprise build type. Set up Firebase App Distribution Gradle Plugin using Distribute Android apps to testers using Gradle guide.</p>"},{"location":"teams/android/project_setup/30_firebase/#authentication-with-firebase","title":"Authentication with Firebase","text":"<p>Our CI workflows authenticate with Firebase using Service account credentials. Follow this guide, creating a service account key in Dev Firebase Google Cloud project:</p> <ol> <li> <p>Go to Google Cloud Console and select your Firebase project</p> <p>Pro tip</p> <p>If you're unsure which project to choose, you can open up your Dev Firebase project, go to <code>Project Settings &gt; Service accounts</code> and click <code>Manage service account permissions \ud83d\udd17</code> which will open up your project's Google Cloud Console, right at the Service accounts page.</p> </li> <li> <p>Create a new Service account with descriptive name and description    </p> </li> <li> <p>Assign the \"Firebase Admin\" role to this account    </p> </li> <li> <p>Click Done, navigate to that account, and create a new JSON key in <code>Keys &gt; Add key</code>.</p> </li> <li>Copy contents of this key into <code>APP_DISTRIBUTION_SERVICE_ACCOUNT</code> repository secret in GitHub and delete the JSON file from your disk.</li> </ol> <p>More info about CI/CD setup is in the CI/CD page.</p> <p>Pro tip</p> <p>If you forgot to assign the \"Firebase Admin\" role to your service account, you can do that in <code>IAM &amp; Admin &gt; IAM</code> menu of Cloud Console by clicking the <code>Edit principal</code> icon next to service account.</p>"},{"location":"teams/android/project_setup/30_firebase/#create-distribution-groups","title":"Create distribution groups","text":"<p>The last thing to set up is Distribution groups. Create three App Distribution distribution groups:</p> <ul> <li><code>futured-devs</code></li> <li><code>futured-qa</code></li> <li>the last one will be for client</li> </ul> <p>Invite collaborators to distribution groups. You can also create an invite link. You will reference the devs and QA groups from CI/CD pipelines.</p> <p></p>"},{"location":"teams/android/project_setup/30_firebase/#crashlytics","title":"Crashlytics","text":"<p>If you decide to use Firebase Crashlytics, make sure to disable mapping file upload for debug builds.: </p><pre><code>buildTypes {\n    getByName(\"debug\") {\n        configure&lt;CrashlyticsExtension&gt; {\n            mappingFileUploadEnabled = false\n        }\n    }\n}\n</code></pre><p></p>"},{"location":"teams/android/project_setup/40_ci_cd/","title":"CI/CD","text":""},{"location":"teams/android/project_setup/40_ci_cd/#cicd","title":"CI/CD","text":"<p>Projects created from our templates have default GitHub Actions configuration that contains workflows for pull request checks, Enterprise build distribution, and release on Google Play Store.</p> <p>Default configuration uses shared workflows for this purpose.</p>"},{"location":"teams/android/project_setup/40_ci_cd/#workflow-overview","title":"Workflow Overview","text":"<p>The CI/CD setup consists of three main workflows:</p> <ol> <li>PR Check Workflow - Runs on every pull request</li> <li>Enterprise Workflow - Runs on pushes to <code>develop</code> branch  </li> <li>Release Workflow - Runs when a GitHub release is created</li> </ol>"},{"location":"teams/android/project_setup/40_ci_cd/#android-native-projects","title":"Android Native Projects","text":""},{"location":"teams/android/project_setup/40_ci_cd/#pr-check-workflow","title":"PR Check Workflow","text":"<p>PR Check workflow - This workflow is triggered every time a pull request is created and doesn't require any additional configuration. The main purpose of this workflow is to run lint checks and unit tests. If major shortcomings are found or unit tests are not passing, this workflow will fail and PR merge will be blocked until it's resolved.</p> <p>What it does:</p> <ul> <li>Runs linting checks</li> <li>Executes unit tests</li> <li>Validates code quality</li> <li>Blocks PR merge if checks fail</li> </ul>"},{"location":"teams/android/project_setup/40_ci_cd/#enterprise-workflow","title":"Enterprise Workflow","text":"<p>Enterprise workflow - This workflow is triggered after push/merge to the <code>develop</code> branch. It produces an Enterprise build (internal testing build) and publishes it to Firebase App Distribution for testing.</p> <p>Required Setup: See Setup Requirements section</p> <p>What it does:</p> <ul> <li>Builds the app in enterprise build variant </li> <li>Signs the APK with development key</li> <li>Uploads to Firebase App Distribution</li> </ul>"},{"location":"teams/android/project_setup/40_ci_cd/#release-workflow","title":"Release Workflow","text":"<p>The release workflow is triggered when a GitHub release is created. It builds a production-ready app bundle and uploads it to Google Play Console.</p> <p>Required Setup: See Setup Requirements section</p> <p>What it does:</p> <ul> <li>Builds signed release AAB</li> <li>Uploads to Google Play Console</li> </ul>"},{"location":"teams/android/project_setup/40_ci_cd/#kmp-kotlin-multiplatform-projects","title":"KMP (Kotlin Multiplatform) Projects","text":"<p>Multiplatform projects contain similar workflows as native projects with additional optimization for change detection.</p>"},{"location":"teams/android/project_setup/40_ci_cd/#change-detection","title":"Change Detection","text":"<p>Before running the PR Check workflow, KMP projects use a detect changes job to determine if Android/KMP code has been modified. This prevents unnecessary CI/CD runs when only iOS code has changed.</p> <p>How it works:</p> <ul> <li>Analyzes changed files in the PR</li> <li>Checks if Android/KMP source files were modified</li> <li>Only triggers Android workflows if relevant changes are detected</li> <li>Saves GitHub Actions runner time and resources</li> </ul>"},{"location":"teams/android/project_setup/40_ci_cd/#workflow-differences","title":"Workflow Differences","text":"<ul> <li>PR Check Workflow: Same as native projects, but only runs if Android/KMP changes are detected</li> <li>Enterprise Workflow: Same as native projects, but includes jobs for both Android and iOS</li> <li>Release Workflow: Same as native projects, but includes jobs for both Android and iOS</li> </ul>"},{"location":"teams/android/project_setup/40_ci_cd/#setup-requirements","title":"Setup Requirements","text":""},{"location":"teams/android/project_setup/40_ci_cd/#for-enterprise-workflow","title":"For Enterprise Workflow","text":"<p>About Permissions</p> <p>If you don't have necessary permissions to perform any of the steps described below, feel free to ask your tech leader for permissions and/or help.</p> <ul> <li><code>APP_DISTRIBUTION_SERVICE_ACCOUNT</code> secret in GitHub repository settings</li> <li>Firebase project configured (see Firebase Setup)</li> </ul> <p></p>"},{"location":"teams/android/project_setup/40_ci_cd/#for-release-workflow","title":"For Release Workflow","text":"<ul> <li>Complete setup described in Release CI/CD Guide</li> <li>Google Play Console access</li> <li>App signing keys and passwords</li> <li>Google Cloud service account</li> </ul>"},{"location":"teams/android/project_setup/50_translations/","title":"Translations","text":""},{"location":"teams/android/project_setup/50_translations/#setup-for-translations-and-multilanguage-support","title":"Setup for translations and multilanguage support","text":"<p>Our applications are mostly multilingual, and even if they're not, it is a general rule of thumb to maintain translations outside of the application project. This allows us to share translations across multiple platforms. </p> <p>For this purpose, we usually use Google Sheets table combined with Sheet happens gradle plugin. It allows us to download translations from Google Spreadsheet in compatible strings.xml form into the Android projects. This solution is also compatible with moko-resources that is used as a multiplatform resources library on KMP projects, providing access to translations on all targeted platforms.</p>"},{"location":"teams/android/project_setup/50_translations/#android-native-projects","title":"Android native projects","text":"<p>For Android native projects based on our template, the setup is pretty straightforward. Just follow the instructions on Sheet happens GitHub page.</p>"},{"location":"teams/android/project_setup/50_translations/#kmp-projects","title":"KMP projects","text":""},{"location":"teams/android/project_setup/50_translations/#1-add-sheet-happens-gradle-plugin","title":"1. Add sheet-happens gradle plugin","text":"<p>Add the Sheet happens plugin to your resource module's <code>build.gradle.kts</code> file:</p> <pre><code>plugins {\n    // ... other plugins\n    alias(libs.plugins.sheet.happens)\n}\n</code></pre>"},{"location":"teams/android/project_setup/50_translations/#2-configure-plugin-target-folder","title":"2. Configure plugin target folder","text":"<p>Configure the plugin to copy files to the proper moko-resources folder:</p> <pre><code>sheetHappens {\n    // ... other configuration\n    resourcesLayout {\n        resourcesDir.set(layout.projectDirectory.dir(\"src/commonMain/moko-resources\"))\n        splitResources.set(true)\n    }\n}\n</code></pre>"},{"location":"teams/android/project_setup/50_translations/#security-considerations","title":"Security Considerations","text":"<p>API Key Security</p> <p>Always store sensitive API keys securely and never commit them to version control.</p> <p>Note</p> <p>If you use Firebase, create the Google Sheets API key in your Dev Firebase Google Cloud project (not the production one).</p> <p>For security reasons, extract the API key to a <code>local.properties</code> file that is not part of GitHub versioning:</p> <pre><code># local.properties (not committed to Git)\nsheetHappens.apiKey=your_api_key_here\n</code></pre> <p>Then reference it in your Gradle configuration:</p> <pre><code>sheetHappens {\n    // ... other configuration\n    apiKey.set(localProperties.getProperty(\"sheetHappens.apiKey\") ?: \"\")\n}\n</code></pre>"},{"location":"teams/android/release/00_google_play_account/","title":"Google Play Account","text":""},{"location":"teams/android/release/00_google_play_account/#google-play-account-setup","title":"Google Play Account Setup","text":"<p>This page describes how to create and set up a Google Play account.</p>"},{"location":"teams/android/release/00_google_play_account/#existing-google-play-account","title":"Existing Google Play Account","text":"<p>If the client already has a Google Play account:</p> <ol> <li>Invite the Futured account (<code>ops@futured.app</code>) to the client's Google Play Console.</li> <li>Configure the appropriate permissions based on project requirements. We recommend granting Admin access, which enables Futured to fully manage the app, including version uploads, tester management, store presence (descriptions, screenshots, and other assets) and very importantly - CI/CD setup.</li> <li>Proceed to Setting up your app in Google Play Console.</li> </ol>"},{"location":"teams/android/release/00_google_play_account/#new-google-play-account","title":"New Google Play Account","text":"<p>This step has to be done by the client - the new account owner.</p> <p>The account creation process varies depending on whether you're creating a personal or organization account.</p> <p>Start the registration process here: Google Play Console Signup. </p> <p>For detailed instructions, consult the Play Console Getting Started Guide.</p> <p>Info</p> <ul> <li>A one-time registration fee of US$25 applies to both personal and organization accounts</li> <li>Payment must be made via credit/debit card</li> <li>You may need to provide ID documentation or other verification materials</li> </ul>"},{"location":"teams/android/release/00_google_play_account/#organization-account-documentation","title":"Organization Account (Documentation)","text":"<p>Required information:</p> <ul> <li>D\u2011U\u2011N\u2011S Number (obtain from D&amp;B)<ul> <li>Select \"I'm a Google developer\" in the wizard (also available in Czech)</li> <li>Standard processing time: up to 30 business days</li> <li>Expedited processing ($200-$300): approximately 8 business days</li> <li>Community experiences with D-U-N-S processing times</li> </ul> </li> <li>Developer name (can differ from legal name and can be changed later)</li> <li>Organization details (name, address, phone, website)</li> <li>Contact information (email and phone) for Google communications</li> <li>Developer contact information (email and phone) for your Google Play profile</li> </ul> <p>Info</p> <p>The following information will be publicly visible on Google Play:</p> <ul> <li>Organization name and address</li> <li>Developer name and email</li> <li>Developer phone number</li> </ul>"},{"location":"teams/android/release/00_google_play_account/#personal-account-documentation","title":"Personal Account (Documentation)","text":"<p>Required information:</p> <ul> <li>Developer name (can differ from legal name and can be changed later)</li> <li>Legal name and address</li> <li>Contact information (email and phone) for Google communications</li> <li>Developer email (will be visible in your Google Play profile)</li> </ul> <p>Warning</p> <p>Organization accounts are preferred over personal accounts.</p> <ul> <li>The main difference between a personal and organization account is that the personal account is not associated with a D-U-N-S number, however your legal (personal) name and address will be publicly visible on Google Play.</li> <li>For personal accounts, before production release, you must complete a closed testing phase with the following requirements:<ul> <li>Minimum of 12 testers</li> <li>Testers must be continuously opted-in for 14 days</li> <li>Learn more</li> </ul> </li> </ul>"},{"location":"teams/android/release/10_google_play_app/","title":"Google Play App","text":""},{"location":"teams/android/release/10_google_play_app/#setting-up-your-app-in-google-play-console","title":"Setting Up Your App in Google Play Console","text":"<p>This guide will help you set up your app in the Google Play Console, ensuring all requirements are met for testing and release.</p>"},{"location":"teams/android/release/10_google_play_app/#requirements-to-create-an-application","title":"Requirements to create an application","text":"<ul> <li>Application ID (package name) - cannot be changed later</li> <li>App name (maximum 50 characters) - can be changed later</li> <li>Assets (see documentation):<ul> <li>App icon: 512x512 px, PNG, 32-bit with alpha, maximum size: 1024KB (see design specifications)</li> <li>Description: short (80 characters) and long (maximum 4000 characters) for all supported languages</li> <li>Screenshots for phones or tablets: 2-8 screenshots, JPEG or 24-bit PNG (no alpha), maximum 8 MB, ratio: 16:9 or 9:16</li> <li>Feature graphic: JPEG or 24-bit PNG (no alpha), 1024x500 px</li> </ul> </li> <li>Email address for the content ratings questionnaire</li> <li>App type and category (see documentation)</li> <li>Labels</li> <li>Declarations: Advertising ID, Data safety, Health apps, Financial features, and other required forms</li> <li>Age rating: 18+ or made for kids</li> <li>Create an <code>upload key certificate</code> for signing the app (see Key Management section below)</li> <li>Set up MD5, SHA-1, and SHA-256 fingerprints for the <code>upload key certificate</code> in the Google Play Console</li> <li>Privacy policy link</li> <li>Testing track emails for Internal, Closed, and Open testing (see documentation)</li> <li>Release countries</li> </ul> <p>Please complete all required declarations as soon as possible. Some of them are required for uploading the app to the testing tracks.</p>"},{"location":"teams/android/release/10_google_play_app/#key-management","title":"Key Management","text":"<p>You can use Play App Signing to have Google generate the key, or you can provide it to Google when you first upload the application. This guide uses Play App Signing.</p>"},{"location":"teams/android/release/10_google_play_app/#understanding-the-keys","title":"Understanding the Keys","text":"<ul> <li>Upload Key: Used by developers to sign APK/AAB before Play Console upload.</li> <li>App Signing Key: Used by Google to re-sign APK/AAB after upload for secure delivery.</li> </ul>"},{"location":"teams/android/release/10_google_play_app/#upload-key-setup","title":"Upload Key Setup","text":"<ol> <li> <p>Generate the Upload Key</p> <p>Option 1: Android Studio (Recommended)</p> <ol> <li>Navigate to the Build menu</li> <li>Select Generate Signed Bundle / APK</li> <li>Choose between Android App Bundle or APK</li> <li>Click Next</li> <li>Select Create new... under Key store path</li> <li>Complete the form and click OK</li> </ol> <p>Option 2: Command Line </p><pre><code>keytool -genkey -v -keystore your-upload-key.keystore -keyalg RSA -keysize 2048 -validity 10000 -alias your-alias-name\n</code></pre><p></p> <p>Naming Convention</p> <p>Avoid generic names like \"upload\" or \"android\" for your key aliases. Using generic names will make it harder to inspect GitHub CI logs, as these properties are usually passed as secrets and will get masked.</p> <p>For example, if you use <code>upload</code> as the alias name, your logs can contain something like this: <code>Task :app:****CrashlyticsMappingFile SKIPPED</code>, etc. Using <code>android</code> can be even worse, as many logs contain the word <code>android</code> in them.</p> </li> <li> <p>Store the Upload Key</p> <p>Store the upload key credentials inside our Bitwarden. Create, or use existing entry for mobile application inside <code>Android</code> Collection. Owner should be set to <code>Futured</code>.</p> <ul> <li>Upload key (<code>.keystore</code> file)</li> <li>Keystore password</li> <li>Upload key password</li> <li>Upload key alias</li> </ul> <p>Store the upload key <code>.keystore</code> file in repo alongside debug keystore. Make sure the release signing config in Android Gradle Plugin correctly references the keystore file.</p> </li> <li> <p>Generate and Upload Signed Build</p> <ul> <li>Use Android Studio to generate a signed AAB using the upload key created in step 1.</li> <li>Manually upload the signed build to a testing track for the first time in Google Play Console</li> <li>Google will automatically generate the App Signing Key</li> <li>After upload, you can locate the SHA-1 fingerprint of your App Signing Key in the Google Play Console under App Signing settings.</li> </ul> </li> </ol> <p>About Fingerprints</p> <ul> <li>Do not forget to add the SHA-1 of the App Signing Key key to Firebase Console.</li> <li>Ensure all third-party SDKs (Google Maps, Facebook login, etc.) are configured with the correct signing key information.</li> </ul>"},{"location":"teams/android/release/20_ci_cd/","title":"CI/CD","text":""},{"location":"teams/android/release/20_ci_cd/#cicd","title":"CI/CD","text":""},{"location":"teams/android/release/20_ci_cd/#introduction","title":"Introduction","text":"<p>The release process consists of publishing a new release on GitHub, which triggers a GitHub Actions workflow that uploads a new build to Google Play Console using Google Play Android Developer API.</p> <p>The workflow file used to run the jobs is implemented in our shared workflows repo. A trigger workflow in your application repo will call this workflow during release.</p> <p>About Permissions</p> <p>If you don't have necessary permissions to perform any of the steps described below, feel free to ask your tech leader for permissions and/or help.</p> <p>The CI/CD setup requires configuration in three key areas:</p> <ol> <li>Google Cloud Platform</li> <li>GitHub Actions</li> <li>Google Play Console</li> </ol> <p>Each component plays a vital role in automating the release process.</p>"},{"location":"teams/android/release/20_ci_cd/#google-cloud-console","title":"Google Cloud Console","text":""},{"location":"teams/android/release/20_ci_cd/#prerequisites","title":"Prerequisites","text":"<p>There are several prerequisites we need in order to set up the release pipeline:</p> <ul> <li>Google Play Android Developer API enabled</li> <li>Google Cloud service account</li> <li>Service account JSON key</li> </ul> <p>We will be working with the Google Cloud project associated with the production Firebase project. If Firebase is not integrated, you have two options:</p> <ul> <li>Create a new Google Cloud project</li> <li>Work with the client to configure an existing Google Cloud project that you want to use</li> </ul>"},{"location":"teams/android/release/20_ci_cd/#setting-up-google-play-android-developer-api","title":"Setting Up Google Play Android Developer API","text":"<ol> <li>In Google Cloud Console, go to the API Library</li> <li>Enable the <code>Google Play Android Developer API</code></li> </ol>"},{"location":"teams/android/release/20_ci_cd/#creating-service-account","title":"Creating Service Account","text":"<ol> <li>In Google Cloud Console, go to IAM &amp; Admin &gt; Service Accounts</li> <li>Create a new service account with:<ul> <li>Service account name: \"Futured GitHub\"</li> <li>Description: \"Service account for uploading app builds from Futured GitHub\"</li> <li> <p>No additional permissions needed</p> <p></p> </li> </ul> </li> </ol>"},{"location":"teams/android/release/20_ci_cd/#generating-service-account-json-key","title":"Generating Service Account JSON Key","text":"<ol> <li>For the service account you just created:<ul> <li>Navigate to <code>Keys</code> tab</li> <li>Click <code>Add key &gt; Create new key &gt; JSON</code></li> <li>A new JSON key will be generated and automatically downloaded</li> </ul> </li> <li>Store the key in Bitwarden:<ul> <li>Create, or use existing entry for mobile application inside <code>Android</code> Collection. Owner should be set to <code>Futured</code>.</li> <li>Upload JSON key as attachment</li> </ul> </li> <li>Copy content of the JSON file key and store it as <code>GOOGLE_PLAY_PUBLISH_SERVICE_ACCOUNT</code> secret inside your GitHub repo</li> <li>Delete the JSON key from your machine (you won't need it anymore)</li> </ol>"},{"location":"teams/android/release/20_ci_cd/#google-play-console","title":"Google Play Console","text":"<p>B...but, I don't have access to Play Console \ud83e\udd7a</p> <p>Following steps will require Google Play Console admin-level permissions.</p> <ul> <li>If there's <code>ops@futured.app</code> account invited to client's console with necessary permissions, these steps can be done by you and/or somebody who has access to ops account.</li> <li>If not, please work with client to go through these steps.</li> </ul> <p>To enable automated uploads from CI to Google Play Console, we need to grant the service account access to the Play Console. This involves inviting the service account email address (found in the Google Cloud Console) to the Google Play Console with appropriate permissions.</p> <ol> <li> <p>In Google Cloud Console:</p> <ul> <li>Go to IAM &amp; Admin &gt; Service Accounts</li> <li>Find email of the service account you created earlier</li> </ul> </li> <li> <p>Inside Play Console:</p> <ul> <li>Go to <code>Users and permissions &gt; Invite new users</code></li> <li>Fill in Service Account e-mail</li> <li>In <code>App permissions</code> tab, select your app and grant following permissions:<ul> <li><code>View app information (read-only)</code></li> <li><code>Edit and delete draft apps</code></li> <li><code>Release apps to testing tracks</code></li> <li><code>Manage testing tracks and edit tester lists</code></li> </ul> </li> <li>Click <code>Invite user</code></li> </ul> </li> </ol> <p>The service account will automatically accept the invite and should now be visible in <code>Users and permissions</code> menu.</p>"},{"location":"teams/android/release/20_ci_cd/#github-actions","title":"GitHub Actions","text":"<p>In addition to <code>GOOGLE_PLAY_PUBLISH_SERVICE_ACCOUNT</code> secret mentioned above, you will need to set up several other secrets required to sign the App Bundle before upload to Play Console. Follow instructions in your project's release workflow to set up following secrets:</p> <ul> <li>Upload keystore password</li> <li>Upload key alias</li> <li>Upload key password</li> <li>Google Play Android Developer API service account credentials</li> </ul>"},{"location":"teams/android/release/20_ci_cd/#verification","title":"Verification","text":"<p>With this setup, your release pipeline should be up and running. Verify functionality by creating a test release on GitHub.</p> <p>Important Notes</p> <p>Please note that in order to upload a release build from CI, you will be required to:</p> <ol> <li>Complete several declarations in Play Console</li> <li>Have your Privacy Policy URL filled out in Play Console</li> </ol> <p>The first build should be uploaded manually during App Signing setup as described in Google Play app setup page.</p> <p>If client is not able to provide you with Privacy Policy URL at this stage, use a temporary URL like <code>https://example.com</code> to satisfy the Google Play requirements. This is acceptable for internal testing track builds, but remember to update the URL before promoting your app to higher testing tracks.</p>"},{"location":"teams/android/release/30_release_process/","title":"Process Overview","text":""},{"location":"teams/android/release/30_release_process/#release-process","title":"Release Process","text":""},{"location":"teams/android/release/30_release_process/#introduction","title":"Introduction","text":"<p>The release process involves creating a release branch, merging it to main, and triggering the CI/CD pipeline to publish the app to Google Play Console. For general guidelines on working with branches, review Git flow.</p> <p>We usually use Semantic Versioning (<code>x.x.x</code>)</p>"},{"location":"teams/android/release/30_release_process/#release-flow-diagram","title":"Release Flow Diagram","text":""},{"location":"teams/android/release/30_release_process/#release-flow","title":"Release Flow","text":"<ol> <li> <p>Create a release branch:</p> <ul> <li>Branch name format: <code>release/&lt;version&gt;</code></li> <li>Create from: <code>develop</code> branch</li> <li>Merge any release-specific fixes to this branch</li> </ul> </li> <li> <p>Create a Pull Request:</p> <ul> <li>From: <code>release/&lt;version&gt;</code></li> <li>To: <code>main</code></li> <li>PR name format: <code>Release &lt;version&gt;</code></li> </ul> </li> <li> <p>Wait for:</p> <ul> <li>PR approval</li> <li>CI checks</li> </ul> </li> <li> <p>After merge to <code>main</code>, create a new GitHub release:</p> <ul> <li>Tag name format: <code>&lt;version&gt;</code></li> <li>Generate release notes</li> </ul> </li> <li> <p>Wait for CI to build the release</p> </li> <li> <p>Verify the release build in:</p> <ul> <li>Firebase Console</li> <li>Google Play Console</li> </ul> </li> <li> <p>Publish to test channels (depending on project needs):</p> <ul> <li>Internal testing (default)</li> <li>Closed testing (optional)</li> <li>Open testing (optional)</li> </ul> </li> <li> <p>Notify the client about the test release</p> </li> <li> <p>After client approval, publish to production</p> </li> </ol>"},{"location":"teams/design/design_page/","title":"Design Page","text":""},{"location":"teams/design/design_page/#design-page","title":"Design Page","text":"<p>Here you can find how our design team works!</p>"},{"location":"teams/fullstack/","title":"Overview","text":""},{"location":"teams/fullstack/#full-stack","title":"Full-stack","text":"<p>The Full-stack team is responsible for developing and maintaining our web applications across both frontend and backend layers, ensuring seamless integration between user interfaces and server-side functionality.</p>"},{"location":"teams/fullstack/#introduction","title":"Introduction","text":"<ul> <li>Mission &amp; Values - Core principles and goals that guide the team</li> </ul>"},{"location":"teams/fullstack/#technology-stack","title":"Technology Stack","text":"<ul> <li>Frontend: Vue.js, TypeScript, React</li> <li>Backend: Node.js, NestJS</li> <li>Database: PostgreSQL, MongoDB</li> <li>Infrastructure: Docker, GCP, Digital Ocean</li> </ul>"},{"location":"teams/fullstack/#development-workflow","title":"Development Workflow","text":"<ul> <li>Git Flow - Our branching strategies and workflows</li> <li>Pull Request Guidelines - How to create and manage pull requests</li> <li>Code Review Process - Steps and criteria for reviewing code</li> <li>Project Setup - Steps to set up a new project</li> </ul>"},{"location":"teams/fullstack/#tech-stack-overview","title":"\ud83d\udea7 Tech Stack Overview","text":"<ul> <li>\ud83d\udea7 Frontend - Technologies used for user interfaces</li> <li>\ud83d\udea7 Backend - Server-side technologies and architectural patterns</li> <li>\ud83d\udea7 Database - Data storage solutions and management practices</li> <li>\ud83d\udea7 DevOps &amp; Infrastructure - Tools for deployment and infrastructure management</li> <li>\ud83d\udea7 Third-Party Integrations &amp; APIs - External services and APIs used by the team</li> </ul>"},{"location":"teams/fullstack/#coding-standards","title":"\ud83d\udea7 Coding Standards","text":"<ul> <li>Typescript Style Guides - Coding conventions for TypeScript</li> <li>Linting &amp; Formatting Tools - Tools used to enforce code style</li> <li>Secure Coding Practices - Guidelines for writing secure code</li> <li>\ud83d\udea7 Testing Standards - Approaches and tools for testing code</li> <li>Error Handling &amp; Logging - Best practices for managing errors and logs</li> </ul>"},{"location":"teams/fullstack/#development-environment","title":"Development Environment","text":"<ul> <li>Local Setup Instructions - Steps to get the development environment running</li> <li>Environment Variables &amp; Secrets Management - How to handle sensitive configuration</li> </ul>"},{"location":"teams/fullstack/#deployment-operations","title":"\ud83d\udea7 Deployment &amp; Operations","text":"<ul> <li>\ud83d\udea7 Deployment Process - Steps to release code to production</li> <li>\ud83d\udea7 Rollback Procedures - How to revert changes in case of failure</li> <li>\ud83d\udea7 Monitoring &amp; Alerting - Tools and practices for tracking system health</li> </ul>"},{"location":"teams/fullstack/#documentation","title":"\ud83d\udea7 Documentation","text":"<ul> <li>\ud83d\udea7 Code Documentation Standards - Guidelines for commenting and documenting code</li> <li>\ud83d\udea7 API Documentation - Standards for documenting APIs</li> </ul>"},{"location":"teams/fullstack/#security","title":"\ud83d\udea7 Security","text":"<ul> <li>\ud83d\udea7 Authentication &amp; Authorization - How users and services are authenticated and authorized</li> <li>\ud83d\udea7 Data Privacy &amp; Compliance - Policies for protecting user data and meeting regulations</li> </ul>"},{"location":"teams/fullstack/#appendices","title":"\ud83d\udea7 Appendices","text":"<ul> <li>Glossary of Terms - Definitions of technical terms and acronyms</li> <li>\ud83d\udea7 Useful Scripts &amp; Tools - Handy scripts and utilities for daily work</li> <li>\ud83d\udea7 FAQ - Answers to frequently asked questions</li> <li>\ud83d\udea7 Templates - Reusable templates for common documents</li> </ul>"},{"location":"teams/fullstack/appendices/00_glossary/","title":"Glossary","text":"<p>A reference list of common terms and acronyms used in full-stack development.</p> <p>API (Application Programming Interface) A set of rules and protocols for building and interacting with software applications, enabling different systems to communicate.</p> <p>Backend The server-side part of an application responsible for business logic, database interactions, and server configuration.</p> <p>Caching The process of storing frequently accessed data in memory to improve performance and reduce database load (e.g., using Redis or Memcached).</p> <p>CI (Continuous Integration) A practice where code changes are automatically built and tested to detect issues early in the development cycle.</p> <p>CD (Continuous Deployment/Delivery) Automated processes for deploying code to production or staging environments after passing automated tests.</p> <p>CMS (Content Management System) Software that allows users to create, manage, and modify website content without needing to code.</p> <p>CSS (Cascading Style Sheets) A language used to describe the presentation and layout of web pages.</p> <p>CRUD (Create, Read, Update, Delete) The four basic operations for managing data in a database or application.</p> <p>DevOps A set of practices that combines software development (Dev) and IT operations (Ops) to shorten the development lifecycle and deliver high-quality software.</p> <p>Docker A platform for developing, shipping, and running applications in containers, which are lightweight, portable, and self-sufficient units of software.</p> <p>ES6 (ECMAScript 6) A major update to JavaScript that introduced new syntax and features, making the language more powerful and easier to work with.</p> <p>DOM (Document Object Model) A programming interface that represents the structure of HTML or XML documents as a tree of objects, allowing scripts to update content, structure, and style.</p> <p>Frontend The client-side part of an application that users interact with directly, typically built with HTML, CSS, and JavaScript.</p> <p>Full Stack Refers to development across both frontend and backend, encompassing all layers of an application or website.</p> <p>GraphQL An open-source query language and runtime for APIs that enables clients to request exactly the data they need. It reduces over-fetching and under-fetching of data and allows for more efficient, flexible queries.</p> <p>HTML (HyperText Markup Language) The standard language for creating web pages and web applications.</p> <p>HTTP/HTTPS (HyperText Transfer Protocol / Secure) Protocols for transferring data over the web; HTTPS adds encryption for security.</p> <p>IDE (Integrated Development Environment) Software that provides comprehensive tools for software development, such as code editing, debugging, and testing.</p> <p>JSON (JavaScript Object Notation) A lightweight data-interchange format, easy for humans to read and write, and easy for machines to parse and generate.</p> <p>JS (JavaScript) A programming language used to create dynamic and interactive effects within web browsers.</p> <p>JWT (JSON Web Token) A compact, URL-safe token format used for securely transmitting information between parties, commonly used for authentication and authorization.</p> <p>Load Balancer A system that distributes incoming network traffic across multiple servers to ensure reliability and scalability.</p> <p>Middleware Software that acts as a bridge between different systems or layers, commonly used in web frameworks to process requests and responses.</p> <p>NoSQL A category of database systems that store and retrieve data in formats other than relational tables, such as key-value, document, columnar, or graph formats. Popular NoSQL databases include MongoDB, Cassandra, and Redis.</p> <p>ORM (Object-Relational Mapping) A programming technique for converting data between incompatible type systems in object-oriented programming languages. It allows developers to interact with a database using objects instead of SQL queries.</p> <p>PWA (Progressive Web Application) A type of web app that uses modern web capabilities to deliver an app-like experience to users.</p> <p>Rate Limiting A technique used to control the number of requests a user or service can make to an API within a given time frame.</p> <p>REST (Representational State Transfer) An architectural style for designing networked applications, commonly used for building APIs.</p> <p>SaaS (Software as a Service) A software distribution model in which applications are hosted by a provider and made available to customers over the internet.</p> <p>SPA (Single Page Application) A web application that loads a single HTML page and dynamically updates content as the user interacts with the app.</p> <p>SQL (Structured Query Language) A standard language for managing and manipulating relational databases.</p> <p>TypeScript A strongly-typed superset of JavaScript that adds static typing, interfaces, and other features to improve code quality and maintainability, commonly used in both frontend and backend (Node.js) development.</p> <p>UI (User Interface) The visual elements of an application that users interact with.</p> <p>UX (User Experience) The overall experience a user has when interacting with a product or service, focusing on ease of use and satisfaction.</p> <p>Version Control A system (like Git) for tracking changes to code, enabling collaboration and history tracking.</p> <p>WebSocket A protocol for full-duplex communication channels over a single TCP connection, commonly used in real-time web applications.</p>"},{"location":"teams/fullstack/appendices/10_scripts/","title":"Scripts","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/appendices/20_faq/","title":"FAQ","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/appendices/30_templates/","title":"Templates","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/coding_standards/00_style_guides/","title":"Style Guides","text":"<p>We use TypeScript across our stack\u2014including NestJS (backend), Vue.js (frontend), and GraphQL/REST APIs\u2014to improve code quality, maintainability, and developer experience. TypeScript\u2019s static typing helps catch errors early, enables better tooling, and makes codebases easier to scale and refactor.</p>"},{"location":"teams/fullstack/coding_standards/00_style_guides/#why-use-typescript","title":"Why Use TypeScript?","text":"<ul> <li>Early Error Detection   TypeScript catches type-related errors in your IDE, reducing bugs that would otherwise only surface during testing or runtime.</li> <li>Better Documentation   Types act as self-documenting code, making it easier to understand what functions expect and return.</li> <li>Improved Collaboration   Consistent types and interfaces help team members work together more efficiently, especially in large projects.</li> </ul>"},{"location":"teams/fullstack/coding_standards/00_style_guides/#why-use-style-guides","title":"Why Use Style Guides?","text":"<ul> <li>Consistency   Style guides ensure everyone follows the same conventions, making the codebase easier to read and maintain.</li> <li>Fewer Style Debates   With clear guidelines, less time is wasted discussing formatting or naming during code reviews.</li> <li>Focus on Logic   Automated tools (like ESLint and Prettier) enforce most style rules, so discussions can focus on architecture and logic.</li> </ul> <p>We don\u2019t enforce overly strict rules, but we emphasize modern best practices and consistency. Here are some basic rules and practices we follow in our codebases, but we encourage flexibility and new ideas as long as they align with our principles.</p>"},{"location":"teams/fullstack/coding_standards/00_style_guides/#example-rules-and-practices","title":"Example Rules and Practices","text":""},{"location":"teams/fullstack/coding_standards/00_style_guides/#1-naming-conventions","title":"1. Naming Conventions","text":"<ul> <li>Variables and functions: camelCase  </li> </ul> <pre><code>const userCount = 10\nfunction getUserById(id: string) { \u2026 }\n</code></pre> <ul> <li>Classes and interfaces: PascalCase</li> </ul> <pre><code>class UserService { \u2026 }\ninterface UserData { \u2026 }\n</code></pre> <ul> <li>Private members: Prefix with underscore (optional, but consistent if used)</li> </ul> <pre><code>private _internalState: string;\n</code></pre>"},{"location":"teams/fullstack/coding_standards/00_style_guides/#2-type-safety-and-immutability","title":"2. Type Safety and Immutability","text":"<ul> <li>Use <code>readonly</code> for immutable properties</li> </ul> <pre><code>class User {\n    readonly id: string\n    constructor(id: string) { \n        this.id = id \n    }\n}\n</code></pre> <ul> <li>Avoid <code>any</code>; prefer explicit types</li> </ul> <pre><code>// Bad \nfunction logValue(value: any) { \u2026 }\n// Good\nfunction logValue(value: string | number) { \u2026 }\n</code></pre>"},{"location":"teams/fullstack/coding_standards/00_style_guides/#3-graphql-with-nestjs-and-typescript","title":"3. GraphQL with NestJS and TypeScript","text":"<ul> <li>Define GraphQL types as TypeScript classes</li> </ul> <pre><code>@ObjectType()\nclass User {\n    @Field()\n    id: string\n\n    @Field()\n    name: string\n}\n</code></pre> <ul> <li>Use auto-generated types for queries and mutations</li> </ul> <pre><code>@Query(() =&gt; User)\nasync getUsers(): Promise&lt;User[]&gt; { \u2026 }\n</code></pre>"},{"location":"teams/fullstack/coding_standards/00_style_guides/#4-vuejs-with-typescript","title":"4. Vue.js with TypeScript","text":"<ul> <li>Use <code>&lt;script lang=\"ts\"&gt;</code> in Single File Components</li> <li>Define props with types</li> </ul> <pre><code>props: {\n    userId: { type: String as PropType, required: true }\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/10_linting/","title":"Linting","text":""},{"location":"teams/fullstack/coding_standards/10_linting/#our-approach","title":"Our Approach","text":"<p>We enforce consistent code quality and style across all our projects by using a shared set of linting rules, maintained in our public repository: https://github.com/futuredapp/eslint-config-futured</p> <p>Each project imports the appropriate linting configuration from this repository via npm, ensuring that all developers follow the same standards\u2014whether working on frontend (Vue.js) or backend (NestJS) code.</p> <p>In the future, we will also include Prettier rules in this shared configuration for automated code formatting.</p>"},{"location":"teams/fullstack/coding_standards/10_linting/#why-linting-matters","title":"Why Linting Matters","text":"<p>Linting is the process of automatically analyzing code to detect errors, enforce coding standards, and identify problematic patterns. It is a key practice in modern software development for several reasons:</p> <ul> <li>Error Detection and Prevention   Linters catch common mistakes early\u2014such as syntax errors, unused variables, or incorrect imports\u2014before code is even run or reviewed. This reduces debugging time and prevents bugs from reaching production.</li> <li>Consistency Across the Codebase   By enforcing a unified style, linting ensures that code written by different team members looks and behaves similarly. This makes the codebase easier to read, maintain, and collaborate on, especially in large or distributed teams.</li> <li>Improved Code Quality and Maintainability   Linting encourages best practices and discourages anti-patterns, leading to cleaner, more robust, and more secure code.</li> <li>Efficient Code Reviews   Automated linting frees up code reviewers to focus on logic, architecture, and design, rather than style or formatting nits.</li> <li>Knowledge Sharing and Onboarding   Linting rules serve as a living documentation of coding standards, helping new team members quickly adopt best practices.</li> <li>Integration with CI/CD   Linting is integrated into our continuous integration pipeline, blocking code that does not meet our standards from being merged.</li> </ul>"},{"location":"teams/fullstack/coding_standards/10_linting/#tools-and-configuration","title":"Tools and Configuration","text":"<ul> <li>ESLint   Our primary linting tool for both JavaScript and TypeScript, with custom rule sets for Vue.js (frontend) and NestJS (backend).</li> <li>Prettier   Soon to be included in our shared configuration for automated code formatting, ensuring consistent style across all projects.</li> <li>Editor Integration   We encourage developers to set up linting and formatting to run automatically in their code editors for real-time feedback and corrections. We have a guide for automating this setup in out internal documentation.</li> </ul> <p>By standardizing linting and formatting across the organization, we maintain a high-quality, professional codebase that is easy to work with and reflects our commitment to excellence.</p>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/","title":"Secure Coding","text":"<p>Security is a fundamental aspect of modern software development. As a fullstack team working with NestJS, Vue.js, GraphQL, and TypeScript, we adhere to best practices to protect our applications and users.</p>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#1-never-expose-secrets","title":"1. Never Expose Secrets","text":"<ul> <li>Do not commit secrets (API keys, database credentials, JWT secrets) to version control.</li> <li>Use environment variables for configuration and inject them at runtime:</li> </ul> <pre><code>// In NestJS\n@Module({imports: ConfigModule.forRoot()})\nexport class AppModule {}\n</code></pre> <ul> <li>Example:   Store secrets in <code>.env</code> files and add <code>.env</code> to your <code>.gitignore</code>.</li> </ul>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#2-input-validation-and-sanitization","title":"2. Input Validation and Sanitization","text":"<ul> <li>Validate all user input on both client and server to prevent injection attacks:</li> </ul> <pre><code>// In NestJS (with class-validator)\nclass CreateUserDto {\n    @IsEmail()\n    email: string;\n\n    @MinLength(8)\n    password: string;\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#3-authentication-and-authorization","title":"3. Authentication and Authorization","text":"<ul> <li>Use strong, modern authentication (OAuth, JWT with secure storage, or session-based authentication).</li> <li>Example:   In NestJS, use <code>@nestjs/passport</code> and <code>passport-jwt</code> for JWT authentication.</li> <li>Example:   In Vue.js, store tokens securely (preferably in HTTP-only, Secure, SameSite cookies).</li> </ul>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#4-secure-api-design","title":"4. Secure API Design","text":"<ul> <li>Always use HTTPS to encrypt data in transit.</li> <li>Implement rate limiting to protect against brute force and abuse.</li> <li>Example:   In NestJS, use guards and rate-limiting middleware:</li> </ul> <pre><code>@UseGuards(RateLimitGuard)\n@Get('profile')getProfile() { \u2026 }\n</code></pre>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#5-avoid-hardcoded-credentials","title":"5. Avoid Hardcoded Credentials","text":"<ul> <li>Never hardcode usernames, passwords, or API keys in your code.</li> <li>Example:   Use environment variables or a secrets management service (e.g., AWS Secrets Manager, GCP Secret Manager).</li> </ul>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#6-keep-dependencies-updated","title":"6. Keep Dependencies Updated","text":"<ul> <li>Regularly update your Node.js, Vue.js, NestJS, and other dependencies to patch security vulnerabilities.</li> <li>Example:   Use <code>npm audit</code> or Dependabot to monitor for vulnerabilities.</li> </ul>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#7-error-handling-and-logging","title":"7. Error Handling and Logging","text":"<ul> <li>Do not expose stack traces or sensitive information in error messages to clients.</li> <li>Example:   In NestJS, use custom exception filters:</li> </ul> <pre><code>@Catch()\nexport class AllExceptionsFilter implements ExceptionFilter {\n    catch(exception: unknown, host: ArgumentsHost) {\n        // Return a generic error message to the client}\n    }\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/20_secure_coding/#8-secure-graphql-endpoints","title":"8. Secure GraphQL Endpoints","text":"<ul> <li>Validate all queries and mutations to prevent malicious or overly complex requests.</li> <li>Example:   Use query complexity analysis and depth limiting in your GraphQL server.</li> </ul> <p>By following these practices, we ensure our applications are robust, reliable, and secure for our users.</p>"},{"location":"teams/fullstack/coding_standards/30_testing/","title":"Testing","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/coding_standards/40_error_handling/","title":"Error Handling","text":""},{"location":"teams/fullstack/coding_standards/40_error_handling/#error-handling-logging","title":"Error Handling &amp; Logging","text":"<p>This guide covers best practices for error handling and logging in our NestJS applications.</p>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#error-handling","title":"Error Handling","text":""},{"location":"teams/fullstack/coding_standards/40_error_handling/#1-use-graphql-exceptions","title":"1. Use GraphQL Exceptions","text":"<pre><code>// Use built-in GraphQL exceptions\nimport { \n  BadRequestException, \n  NotFoundException, \n  UnauthorizedException,\n  ForbiddenException,\n  ConflictException,\n  InternalServerErrorException \n} from '@nestjs/common';\n\n// Usage examples with context\nthrow new NotFoundException({\n  message: 'User not found',\n  error: 'NOT_FOUND',\n  resourceId: userId,\n  resourceType: 'User'\n});\n\nthrow new BadRequestException({\n  message: 'Invalid input data',\n  error: 'VALIDATION_ERROR',\n  field: 'email',\n  value: email\n});\n\nthrow new UnauthorizedException({\n  message: 'Authentication required',\n  error: 'UNAUTHORIZED',\n  action: 'access_user_profile'\n});\n\nthrow new ForbiddenException({\n  message: 'Insufficient permissions',\n  error: 'FORBIDDEN',\n  resourceId: userId,\n  requiredPermission: 'ADMIN'\n});\n\nthrow new ConflictException({\n  message: 'Resource already exists',\n  error: 'CONFLICT',\n  resourceId: email,\n  resourceType: 'User'\n});\n\nthrow new InternalServerErrorException({\n  message: 'Database connection failed',\n  error: 'INTERNAL_ERROR',\n  service: 'Database',\n  operation: 'create_user'\n});\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#2-rest-api-error-handling-non-graphql-apps","title":"2. REST API Error Handling (Non-GraphQL Apps)","text":"<p>For applications that don't use GraphQL, use standard HTTP exceptions with structured responses:</p> <pre><code>// REST API error handling\nimport { \n  HttpException, \n  HttpStatus \n} from '@nestjs/common';\n\n// Custom error response structure\ninterface ErrorResponse {\n  statusCode: number;\n  message: string;\n  error: string;\n  timestamp: string;\n  path: string;\n  details?: any;\n}\n\n// Usage examples for REST APIs\nthrow new HttpException({\n  statusCode: HttpStatus.NOT_FOUND,\n  message: 'User not found',\n  error: 'Not Found',\n  timestamp: new Date().toISOString(),\n  path: '/api/users/123',\n  details: {\n    userId: '123',\n    resourceType: 'User'\n  }\n}, HttpStatus.NOT_FOUND);\n\nthrow new HttpException({\n  statusCode: HttpStatus.BAD_REQUEST,\n  message: 'Validation failed',\n  error: 'Bad Request',\n  timestamp: new Date().toISOString(),\n  path: '/api/users',\n  details: {\n    field: 'email',\n    value: 'invalid-email',\n    constraint: 'email_format'\n  }\n}, HttpStatus.BAD_REQUEST);\n\nthrow new HttpException({\n  statusCode: HttpStatus.CONFLICT,\n  message: 'User already exists',\n  error: 'Conflict',\n  timestamp: new Date().toISOString(),\n  path: '/api/users',\n  details: {\n    resourceId: 'user@example.com',\n    resourceType: 'User',\n    constraint: 'email_unique'\n  }\n}, HttpStatus.CONFLICT);\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#3-global-exception-filter","title":"3. Global Exception Filter","text":"<pre><code>// filters/http-exception.filter.ts\n@Catch(HttpException)\nexport class HttpExceptionFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const response = ctx.getResponse&lt;Response&gt;();\n    const request = ctx.getRequest&lt;Request&gt;();\n    const status = exception.getStatus();\n\n    const errorResponse = {\n      statusCode: status,\n      timestamp: new Date().toISOString(),\n      path: request.url,\n      message: exception.message,\n      error: exception.getResponse(),\n    };\n\n    // Log the error\n    this.logger.error('HTTP Exception', {\n      ...errorResponse,\n      stack: exception.stack,\n    });\n\n    response.status(status).json(errorResponse);\n  }\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#4-validation-errors","title":"4. Validation Errors","text":"<pre><code>// pipes/validation.pipe.ts\n@Injectable()\nexport class ValidationPipe extends DefaultValidationPipe {\n  transform(value: any, metadata: ArgumentMetadata) {\n    try {\n      return super.transform(value, metadata);\n    } catch (error) {\n      if (error instanceof BadRequestException) {\n        throw new BadRequestException({\n          message: 'Validation failed',\n          error: 'VALIDATION_ERROR',\n          details: error.getResponse()\n        });\n      }\n      throw error;\n    }\n  }\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#5-async-error-handling","title":"5. Async Error Handling","text":"<pre><code>// Always use try-catch with async operations\nasync createUser(userData: CreateUserDto): Promise&lt;User&gt; {\n  try {\n    const user = await this.userRepository.create(userData);\n    return user;\n  } catch (error) {\n    this.logger.error('Failed to create user', {\n      error: error.message,\n      userData,\n      stack: error.stack,\n    });\n\n    if (error.code === '23505') { // PostgreSQL unique constraint\n      throw new ConflictException({\n        message: 'User already exists',\n        error: 'CONFLICT',\n        resourceId: userData.email,\n        resourceType: 'User',\n        constraint: 'email_unique'\n      });\n    }\n\n    throw new InternalServerErrorException({\n      message: 'Internal server error',\n      error: 'INTERNAL_ERROR',\n      operation: 'create_user',\n      details: error.message\n    });\n  }\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#logging","title":"Logging","text":""},{"location":"teams/fullstack/coding_standards/40_error_handling/#1-winston-configuration","title":"1. Winston Configuration","text":"<pre><code>// config/winston.config.ts\nimport { WinstonModule } from 'nest-winston';\nimport * as winston from 'winston';\n\nexport const winstonConfig = WinstonModule.createLogger({\n  transports: [\n    // Console transport for development\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.colorize(),\n        winston.format.simple()\n      ),\n    }),\n\n    // Google Cloud Logging\n    new winston.transports.Console({\n      format: winston.format.combine(\n        winston.format.timestamp(),\n        winston.format.json()\n      ),\n    }),\n  ],\n  level: process.env.LOG_LEVEL || 'info',\n});\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#2-structured-logging","title":"2. Structured Logging","text":"<pre><code>// Always use structured logging with context\n@Injectable()\nexport class UserService {\n  constructor(private readonly logger: Logger) {}\n\n  async findUser(id: string): Promise&lt;User&gt; {\n    this.logger.log('Finding user', {\n      userId: id,\n      service: 'UserService',\n      method: 'findUser',\n    });\n\n    try {\n      const user = await this.userRepository.findById(id);\n\n      this.logger.log('User found', {\n        userId: id,\n        userEmail: user.email,\n        service: 'UserService',\n        method: 'findUser',\n      });\n\n      return user;\n    } catch (error) {\n      this.logger.error('Failed to find user', {\n        userId: id,\n        error: error.message,\n        service: 'UserService',\n        method: 'findUser',\n        stack: error.stack,\n      });\n      throw error;\n    }\n  }\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#3-log-levels","title":"3. Log Levels","text":"<pre><code>// Use appropriate log levels\nlogger.error('Critical error that needs immediate attention', { error, context });\nlogger.warn('Warning that should be monitored', { warning, context });\nlogger.info('General information about application flow', { info, context });\nlogger.debug('Detailed debugging information', { debug, context });\nlogger.verbose('Very detailed debugging information', { verbose, context });\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#4-request-logging-interceptor","title":"4. Request Logging Interceptor","text":"<pre><code>// interceptors/logging.interceptor.ts\n@Injectable()\nexport class LoggingInterceptor implements NestInterceptor {\n  constructor(private readonly logger: Logger) {}\n\n  intercept(context: ExecutionContext, next: CallHandler): Observable&lt;any&gt; {\n    const request = context.switchToHttp().getRequest();\n    const { method, url, body, user } = request;\n    const now = Date.now();\n\n    this.logger.log('Incoming request', {\n      method,\n      url,\n      body: this.sanitizeBody(body),\n      userId: user?.id,\n      userAgent: request.get('User-Agent'),\n    });\n\n    return next.handle().pipe(\n      tap(() =&gt; {\n        const responseTime = Date.now() - now;\n        this.logger.log('Request completed', {\n          method,\n          url,\n          responseTime: `${responseTime}ms`,\n        });\n      }),\n      catchError((error) =&gt; {\n        const responseTime = Date.now() - now;\n        this.logger.error('Request failed', {\n          method,\n          url,\n          responseTime: `${responseTime}ms`,\n          error: error.message,\n        });\n        throw error;\n      })\n    );\n  }\n\n  private sanitizeBody(body: any): any {\n    // Remove sensitive data from logs\n    const sanitized = { ...body };\n    delete sanitized.password;\n    delete sanitized.token;\n    return sanitized;\n  }\n}\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#5-future-elasticsearch-integration","title":"5. Future: Elasticsearch Integration","text":"<pre><code>// config/elasticsearch-logger.config.ts\nimport { ElasticsearchTransport } from 'winston-elasticsearch';\n\nconst elasticsearchTransport = new ElasticsearchTransport({\n  level: 'info',\n  clientOpts: {\n    node: process.env.ELASTICSEARCH_URL,\n    auth: {\n      username: process.env.ELASTICSEARCH_USERNAME,\n      password: process.env.ELASTICSEARCH_PASSWORD,\n    },\n  },\n  indexPrefix: 'logs',\n  ensureMappingTemplate: true,\n  mappingTemplate: {\n    index_patterns: ['logs-*'],\n    settings: {\n      number_of_shards: 1,\n      number_of_replicas: 0,\n    },\n  },\n});\n\n// Add to winston config\ntransports: [\n  // ... existing transports\n  elasticsearchTransport,\n]\n</code></pre>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#best-practices","title":"Best Practices","text":""},{"location":"teams/fullstack/coding_standards/40_error_handling/#error-handling_1","title":"Error Handling","text":"<ul> <li>Use built-in GraphQL exceptions for consistent error responses</li> <li>Implement global exception filters for centralized error handling</li> <li>Handle async errors with try-catch blocks</li> <li>Don't expose internal errors to clients</li> <li>Log all errors with sufficient context</li> </ul>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#logging_1","title":"Logging","text":"<ul> <li>Use structured logging with consistent fields</li> <li>Include relevant context (userId, requestId, service, method)</li> <li>Sanitize sensitive data before logging</li> <li>Use appropriate log levels</li> <li>Log request/response cycles for debugging</li> <li>Include stack traces for errors</li> <li>Use correlation IDs for request tracing</li> </ul>"},{"location":"teams/fullstack/coding_standards/40_error_handling/#performance","title":"Performance","text":"<ul> <li>Avoid logging in hot paths</li> <li>Use async logging when possible</li> <li>Batch log entries for better performance</li> <li>Monitor log volume and storage costs  </li> </ul>"},{"location":"teams/fullstack/deployment/00_deployment/","title":"Process","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/deployment/10_rollback/","title":"Rollback","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/deployment/20_monitoring/","title":"Monitoring","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/","title":"Local Setup","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#local-development-setup","title":"Local Development Setup","text":"<p>This guide walks you through setting up your local development environment for full-stack projects. We use Docker Compose for consistent, isolated development environments.</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#prerequisites","title":"Prerequisites","text":"<p>Before starting, ensure you have the following installed:</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#required-software","title":"Required Software","text":"<ul> <li>Git (latest version)</li> <li>Node.js (version specified in project's <code>.nvmrc</code>, <code>Dockerfile</code> or <code>package.json</code>)</li> <li>Docker Desktop or Orbstack(mac only) (latest stable version)</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#version-management","title":"Version Management","text":"<p>We recommend using Node Version Manager (nvm) for Node.js:</p> <pre><code># Install nvm (if not already installed)\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash\n\n# Restart your terminal or run:\nsource ~/.bashrc\n\n# Install and use the project's Node.js version\nnvm install\nnvm use\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#project-setup","title":"Project Setup","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#1-clone-and-checkout-latest-development-branch","title":"1. Clone and Checkout Latest Development Branch","text":"<pre><code># Clone the repository\ngit clone &lt;repository-url&gt;\ncd &lt;project-name&gt;\n\n# Fetch latest changes\ngit fetch origin\n\n# Checkout the development branch\ngit checkout dev\ngit pull origin dev\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#2-environment-configuration","title":"2. Environment Configuration","text":"<pre><code># Copy the distribution template\ncp docker-compose.dist.yml docker-compose.yml\n\n# Edit with your local values\nnano docker-compose.yml\n</code></pre> <p>Important: Never commit <code>docker-compose.yml</code> with actual secrets to version control.</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#4-request-environment-variables","title":"4. Request Environment Variables","text":"<p>If you don't have the required environment variables:</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#from-colleagues","title":"From Colleagues","text":"<ul> <li>Ask team members for a copy of their <code>docker-compose.yml</code> (with sensitive data redacted)</li> <li>Request access to shared password managers or secret stores</li> <li>Check team documentation for development credentials</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#from-deployment-configuration","title":"From Deployment Configuration","text":"<ul> <li>Review production/staging environment variables (if you have access)</li> <li>Use development/test API keys and credentials</li> <li>Check CI/CD pipeline configuration for environment setup</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#working-alone","title":"Working Alone","text":"<ul> <li>Use placeholder values for local development</li> <li>Set up mock services where possible</li> <li>Document what needs to be configured for production</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#starting-the-development-environment","title":"Starting the Development Environment","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#1-build-and-start-services","title":"1. Build and Start Services","text":"<pre><code># Build all services (first time or after changes)\ndocker-compose build\n\n# Start all services in detached mode\ndocker-compose up -d\n\n# Check service status\ndocker-compose ps\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#2-verify-services-are-running","title":"2. Verify Services Are Running","text":"<pre><code># Check all containers are healthy\ndocker-compose ps\n\n# View logs for any issues\ndocker-compose logs api\ndocker-compose logs postgres\ndocker-compose logs cache\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#3-access-your-application","title":"3. Access Your Application","text":"<ul> <li>API: http://localhost:8080</li> <li>Frontend: http://localhost:3000 (if applicable)</li> <li>Database: localhost:5432</li> <li>Redis: localhost:6379</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#database-management","title":"Database Management","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#1-run-migrations","title":"1. Run Migrations","text":"<p>The correct migration command is always specified in the project's <code>package.json</code> and <code>README.md</code>. Common examples:</p> <pre><code># Run migrations inside the API container\ndocker-compose exec api npm run migrate\n\n# Or if using a specific migration tool\ndocker-compose exec api npx prisma migrate dev\ndocker-compose exec api npx typeorm migration:run\n</code></pre> <p>Always check the project's documentation for the correct command.</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#2-seed-development-data","title":"2. Seed Development Data","text":"<p>The correct seed command is always specified in the project's <code>package.json</code> and <code>README.md</code>. Common examples:</p> <pre><code># Run seed scripts\ndocker-compose exec api npm run seed\n\n# Or manually seed if needed\ndocker-compose exec api npm run seed:dev\n</code></pre> <p>Always check the project's documentation for the correct command.</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#3-database-access","title":"3. Database Access","text":"<p>We recommend using GUI tools for database access:</p> <ul> <li>DataGrip (JetBrains) - Professional database IDE</li> <li>DBeaver - Free, universal database tool</li> <li>pgAdmin - PostgreSQL-specific administration tool</li> </ul> <p>Connect using these credentials (from your <code>docker-compose.yml</code>): - Host: localhost - Port: 5432 - Database: (check your docker-compose.yml) - Username: (check your docker-compose.yml) - Password: (check your docker-compose.yml)</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#development-workflow","title":"Development Workflow","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#1-code-changes","title":"1. Code Changes","text":"<pre><code># Make your changes in the mounted source directories\n# Changes are automatically reflected due to volume mounting\n\n# Check file changes\ngit status\n\n# Create a feature branch\ngit checkout -b feature/your-feature-name\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#2-testing-your-changes","title":"2. Testing Your Changes","text":"<pre><code># Run tests\ndocker-compose exec api npm test\n\n# Run linting\ndocker-compose exec api npm run lint\n\n# Run type checking\ndocker-compose exec api npm run type-check\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#3-hot-reloading","title":"3. Hot Reloading","text":"<p>The development environment includes hot reloading: - API changes trigger automatic restarts - Frontend changes are reflected immediately - Database changes require manual migration runs</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#troubleshooting","title":"Troubleshooting","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#common-issues","title":"Common Issues","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#1-port-conflicts","title":"1. Port Conflicts","text":"<pre><code># Check what's using the port\nlsof -i :8080\n\n# Stop conflicting services\nsudo systemctl stop conflicting-service\n\n# Or change ports in docker-compose.yml\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#2-docker-issues","title":"2. Docker Issues","text":"<pre><code># Clean up Docker resources\ndocker system prune -f\n\n# Rebuild without cache\ndocker-compose build --no-cache\n\n# Restart Docker Desktop (if on macOS/Windows)\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#3-database-connection-issues","title":"3. Database Connection Issues","text":"<pre><code># Check if database is running\ndocker-compose ps postgres\n\n# View database logs\ndocker-compose logs postgres\n\n# Reset database container\ndocker-compose restart postgres\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#4-environment-variable-problems","title":"4. Environment Variable Problems","text":"<pre><code># Verify environment variables are loaded\ndocker-compose exec api env | grep DATABASE_URL\n\n# Check docker-compose.yml syntax\ndocker-compose config\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#performance-issues","title":"Performance Issues","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#1-slow-builds","title":"1. Slow Builds","text":"<pre><code># Use build cache\ndocker-compose build --parallel\n\n# Optimize Dockerfile with multi-stage builds\n# Use .dockerignore to exclude unnecessary files\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#2-volume-mounting-performance","title":"2. Volume Mounting Performance","text":"<pre><code># On macOS/Windows, ensure file sharing is enabled\n# Consider using delegated mode for better performance\nvolumes:\n  - ./src:/app/src:delegated\n</code></pre>"},{"location":"teams/fullstack/dev_env/00_local_setup/#project-specific-setup","title":"Project-Specific Setup","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#check-readmemd","title":"Check README.md","text":"<p>Always check the project's README.md for: - Project-specific setup instructions - Additional dependencies - Special configuration requirements - Known issues and workarounds</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#environment-differences","title":"Environment Differences","text":"<p>Different projects may require: - Different Node.js versions - Additional services (Redis, MongoDB, etc.) - Specific environment variables - Custom build processes</p>"},{"location":"teams/fullstack/dev_env/00_local_setup/#best-practices","title":"Best Practices","text":""},{"location":"teams/fullstack/dev_env/00_local_setup/#1-git-workflow","title":"1. Git Workflow","text":"<ul> <li>Always work from the latest <code>dev</code> branch</li> <li>Pull latest changes regularly</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#2-docker-usage","title":"2. Docker Usage","text":"<ul> <li>Use Docker for all local development</li> <li>Don't install project dependencies globally</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#3-database-management","title":"3. Database Management","text":"<ul> <li>Always run migrations before starting development</li> <li>Use seed data for consistent development environment</li> <li>Backup important data before destructive operations</li> <li>Use database migrations for schema changes</li> </ul>"},{"location":"teams/fullstack/dev_env/00_local_setup/#4-troubleshooting","title":"4. Troubleshooting","text":"<ul> <li>Check logs first: <code>docker-compose logs &lt;service&gt;</code></li> <li>Verify environment variables are set correctly</li> <li>Ensure all services are running: <code>docker-compose ps</code></li> <li>Check for port conflicts</li> <li>Restart services when in doubt: <code>docker-compose restart</code></li> </ul>"},{"location":"teams/fullstack/dev_env/10_secrets/","title":"Secrets","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#environment-variables-secrets-management","title":"Environment Variables &amp; Secrets Management","text":"<p>Proper secrets management is critical for security and compliance. This guide covers how to handle sensitive configuration data across development and production environments.</p>"},{"location":"teams/fullstack/dev_env/10_secrets/#core-principles","title":"Core Principles","text":"<ul> <li>Never commit secrets to version control</li> <li>Use environment-specific configuration</li> <li>Implement least-privilege access</li> <li>Rotate secrets regularly</li> </ul>"},{"location":"teams/fullstack/dev_env/10_secrets/#local-development","title":"Local Development","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#environment-configuration-files","title":"Environment Configuration Files","text":"<p>We use Docker Compose with environment variables for local development. The configuration is structured as follows:</p>"},{"location":"teams/fullstack/dev_env/10_secrets/#docker-composeyml-template","title":"<code>docker-compose.yml</code> (Template)","text":"<pre><code>version: '3.7'\n\nservices:\n  api:\n    build:\n      context: ./api\n      dockerfile: dev.Dockerfile\n    environment:\n      # External API Keys\n      API_KEY_1: your-api-key\n      API_KEY_2: your-api-key-2\n\n      # Authentication\n      OAUTH_KEY: your-oauth-key\n      CLIENT_ID: your-client-id\n\n      # Database\n      DATABASE_URL: connection-string\n\n      # Redis\n      REDIS_HOST: cache\n      REDIS_PORT: 6379\n\n      # Environment\n      NODE_ENV: development\n      LOG_LEVEL: debug\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#git-configuration","title":"Git Configuration","text":"<p>Never commit these files: - <code>docker-compose.yml</code> (with actual secrets) - <code>.env</code> - <code>.env.local</code> - <code>.env.production</code> - Any file containing actual secret values</p> <p>Always commit these files: - <code>docker-compose.dist.yml</code> - Template showing required variables - <code>.env.example</code> - Template showing required variables - <code>.env.dist</code> - Distribution template (same as .env.example)</p>"},{"location":"teams/fullstack/dev_env/10_secrets/#gitignore-configuration","title":".gitignore Configuration","text":"<pre><code># Environment files\n.env\n.env.local\n.env.production\n.env.staging\n\n# Docker Compose with secrets\ndocker-compose.yml\n\n# Keep templates\n!.env.example\n!.env.dist\n!docker-compose.dist.yml\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#project-setup-instructions","title":"Project Setup Instructions","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#1-initial-setup","title":"1. Initial Setup","text":"<p>When setting up a new project:</p> <pre><code># Copy the docker-compose template\ncp docker-compose.dist.yml docker-compose.yml\n\n# Edit with your actual values\nnano docker-compose.yml\n\n# Start the application with Docker Compose\ndocker-compose up -d\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#2-readme-documentation","title":"2. README Documentation","text":"<p>Include a section in your README.md:</p> <pre><code>## Environment Setup\n\n1. Copy `docker-compose.dist.yml` to `docker-compose.yml`\n2. Fill in your local development values\n3. Never commit `docker-compose.yml` to version control\n\n### Required Environment Variables\n\n| Variable | Description | Example |\n|----------|-------------|---------|\n| `DATABASE_URL` | PostgreSQL connection string | `postgresql://user:pass@postgres/db` |\n| `_API_KEY` | API key | `your-api-key` |\n| `OAUTH_KEY` | OAuth authentication key | `your-oauth-key` |\n| `CLIENT_ID` | Client ID for authentication | `your-client-id` |\n\n### Optional Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `LOG_LEVEL` | Logging verbosity | `debug` |\n| `NODE_ENV` | Environment mode | `development` |\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#production-deployment","title":"Production Deployment","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#google-cloud-platform-gcp","title":"Google Cloud Platform (GCP)","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#secret-manager","title":"Secret Manager","text":"<pre><code># Create secrets via CLI\ngcloud secrets create DATABASE_URL --data-file=./database-url.txt\ngcloud secrets create JWT_SECRET --data-file=./jwt-secret.txt\n\n# Grant access to service account\ngcloud secrets add-iam-policy-binding DATABASE_URL \\\n    --member=\"serviceAccount:my-app@my-project.iam.gserviceaccount.com\" \\\n    --role=\"roles/secretmanager.secretAccessor\"\n</code></pre> <p>Note: You can also create and manage secrets through the Google Cloud Console UI at https://console.cloud.google.com/security/secret-manager</p>"},{"location":"teams/fullstack/dev_env/10_secrets/#cloud-run-app-engine","title":"Cloud Run / App Engine","text":"<pre><code># app.yaml\nenv_variables:\n  NODE_ENV: production\n  # Other non-sensitive variables\n\n# Sensitive variables are injected via Secret Manager\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#digital-ocean","title":"Digital Ocean","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#app-platform-environment-variables","title":"App Platform Environment Variables","text":"<pre><code># .do/app.yaml\nname: my-app\nservices:\n  - name: web\n    environment_slug: node-js\n    envs:\n      - key: NODE_ENV\n        value: production\n      - key: DATABASE_URL\n        scope: RUN_AND_BUILD_TIME\n        type: SECRET\n        value: ${DATABASE_URL_SECRET}\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#security-best-practices","title":"Security Best Practices","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#1-secret-rotation","title":"1. Secret Rotation","text":"<ul> <li>JWT Secrets: Rotate every 90 days</li> <li>API Keys: Rotate every 6 months</li> <li>Database Passwords: Rotate every 12 months</li> <li>Service Account Keys: Rotate every 90 days</li> </ul>"},{"location":"teams/fullstack/dev_env/10_secrets/#2-access-control","title":"2. Access Control","text":"<pre><code># Example: GCP IAM roles for secret access\ngcloud projects add-iam-policy-binding my-project \\\n    --member=\"serviceAccount:app@my-project.iam.gserviceaccount.com\" \\\n    --role=\"roles/secretmanager.secretAccessor\"\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#common-patterns","title":"Common Patterns","text":""},{"location":"teams/fullstack/dev_env/10_secrets/#1-configuration-validation","title":"1. Configuration Validation","text":"<pre><code>// config/validation.ts\nimport { z } from 'zod';\n\nconst envSchema = z.object({\n  DATABASE_URL: z.string().url(),\n  JWT_SECRET: z.string().min(32),\n  NODE_ENV: z.enum(['development', 'production', 'test']),\n});\n\nexport const validateEnv = () =&gt; {\n  const result = envSchema.safeParse(process.env);\n  if (!result.success) {\n    console.error('\u274c Invalid environment variables:', result.error.flatten().fieldErrors);\n    process.exit(1);\n  }\n  return result.data;\n};\n</code></pre>"},{"location":"teams/fullstack/dev_env/10_secrets/#2-development-vs-production","title":"2. Development vs Production","text":"<pre><code>// Example: Different database URLs\nconst getDatabaseUrl = () =&gt; {\n  if (process.env.NODE_ENV === 'production') {\n    return process.env.DATABASE_URL;\n  }\n  // Development: Use local database\n  return process.env.DATABASE_URL || 'postgresql://localhost:5432/dev_db';\n};\n</code></pre>"},{"location":"teams/fullstack/development/00_git_flow/","title":"Git Flow","text":"<p>We use a structured Git branching model to ensure smooth collaboration and maintain a clean, reliable codebase. Our workflow is based on the following branches and conventions:</p>"},{"location":"teams/fullstack/development/00_git_flow/#main-branches","title":"Main Branches","text":"<ul> <li><code>main</code>   The production-ready branch. Code here is always stable and deployable to our production environment.</li> <li><code>develop</code>   The integration branch for ongoing development. All feature branches are merged here before being promoted to <code>main</code>.</li> <li><code>staging</code>   Optional branch for pre-production testing. It serves as a staging area for features before they are merged into <code>main</code>. Only used if project requires testing with production-like data.</li> </ul>"},{"location":"teams/fullstack/development/00_git_flow/#feature-branches","title":"Feature Branches","text":"<ul> <li>Branch Naming   Feature branches follow the pattern: <code>feature/&lt;jira-ticket-number&gt;-&lt;short-description-in-kebab-case&gt;</code>   Example: <code>feature/ABC-123-user-authentication</code></li> <li>Source Branch   Feature branches are created from the latest <code>develop</code> branch.</li> </ul>"},{"location":"teams/fullstack/development/00_git_flow/#bugfix-branches","title":"Bugfix Branches","text":"<ul> <li>Branch Naming   Bugfix branches follow the pattern: <code>bugfix/&lt;jira-ticket-number&gt;-&lt;short-description-in-kebab-case&gt;</code>   Example: <code>bugfix/ABC-123-fix-login-error</code></li> <li>In case there is no Jira ticket, the branch name should be descriptive of the bug being fixed.</li> <li>Source Branch   Bugfix branches are created from the branch where the bug was discovered (usually <code>develop</code>).</li> </ul>"},{"location":"teams/fullstack/development/00_git_flow/#production-hotfixes","title":"Production Hotfixes","text":"<ul> <li>Branch Naming   Hotfix branches follow the pattern: <code>hotfix/&lt;jira-ticket-number&gt;-&lt;short-description-in-kebab-case&gt;</code>   Example: <code>hotfix/ABC-124-resolve-db-timeout</code></li> <li>Source Branch   Hotfix branches are created from the <code>main</code> branch to address critical issues in production.</li> <li>Procedure   After the hotfix is tested and approved, it is merged back into both <code>main</code> and <code>develop</code> to ensure the fix is included in future releases.</li> </ul>"},{"location":"teams/fullstack/development/00_git_flow/#commit-messages","title":"Commit Messages","text":"<ul> <li>Language   All commit messages must be written in English.</li> <li>Jira Integration   Ideally, each commit message should include the Jira ticket number at the start (e.g., <code>ABC-123: Update user authentication</code>).</li> <li>Clarity   Commit messages should be clear and concise, explaining the purpose of the change. We do not use emojis in commit messages.</li> <li>Semantic Commit Messages   We also allow semantic commit messages, which follow the format: <code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;</code>, for example: <code>feat(auth): add user login functionality</code>. These should also include the Jira ticket number if applicable.</li> </ul>"},{"location":"teams/fullstack/development/00_git_flow/#automated-checks","title":"Automated Checks","text":"<ul> <li>Dangerfile   We use a Dangerfile to automatically check commit and pull request parameters, ensuring adherence to our standards.</li> </ul>"},{"location":"teams/fullstack/development/00_git_flow/#release-tags","title":"Release Tags","text":"<ul> <li>Version Tags   Optionally, we tag commits with release version numbers (e.g., <code>v1.2.0</code>) to mark stable points in our codebase.</li> </ul>"},{"location":"teams/fullstack/development/00_git_flow/#environments","title":"Environments","text":"<ul> <li>Development, Staging, and Production   We maintain separate environments for development, staging, and production.   The <code>develop</code> branch is typically deployed to the development environment (<code>dev</code>), and the <code>main</code> branch is deployed to production (<code>prod</code>). Optionally, a <code>staging</code> branch can be used and deployed to the staging environment.</li> </ul>"},{"location":"teams/fullstack/development/10_pull_request_guidelines/","title":"Pull Request Guidelines","text":"<p>We use GitHub for code collaboration and follow best practices to ensure our pull requests are easy to review, maintain high quality, and integrate smoothly into our workflow.</p> <ul> <li> <p>Keep PRs Small and Focused   Submit pull requests that address a single purpose or issue. Smaller, focused PRs are easier and faster to review and reduce the risk of introducing bugs.</p> </li> <li> <p>Informative Titles and Descriptions   Use clear, descriptive titles. In the description, provide context on what the PR does, reference the related Jira ticket, and include any relevant details or links. This helps reviewers quickly understand the change and its purpose.</p> </li> <li> <p>Include Jira Ticket Numbers   Reference the relevant Jira ticket number in the PR title and description to link code changes to tracked work. When it is properly linked, the PR will automatically update the ticket status in Jira.</p> </li> <li> <p>Review Before Submitting   Test and review your own changes before opening a PR. This helps catch errors early and improves the quality of the review process.</p> </li> <li> <p>English, Czech and Slovak Only   All PR titles, descriptions, and comments must be written in these languages to ensure clarity for all collaborators.</p> </li> <li> <p>Leverage Automation   We use tools like Copilot and CodeRabbit to assist with PR summaries, code suggestions, and automated code analysis. These tools provide early feedback and help maintain consistent code quality.</p> </li> <li> <p>Slack Integration   PR activity on some projects is integrated with Slack to keep the team informed of new pull requests, reviews, and merges in real time. There are dedicated channels for each project to facilitate communication and collaboration.</p> </li> <li> <p>Feature and Bugfix Branches   Open pull requests from feature (<code>feature/\u2026</code>) and bugfix (<code>bugfix/\u2026</code>) branches with the base branch set to <code>develop</code>.</p> </li> <li> <p>Hotfix Branches   Open pull requests from hotfix (<code>hotfix/\u2026</code>) branches with the base branch set to <code>main</code>.</p> </li> <li> <p>Who to Assign   Assign your pull request to at least one teammate who is familiar with the relevant codebase or feature area. If unsure, consult your team lead or refer to the code ownership guidelines.</p> </li> <li> <p>When to Assign   Assign reviewers immediately after opening the pull request. This ensures timely feedback and helps keep the development process moving smoothly. </p> </li> <li> <p>Sync Regularly   Regularly update your branch with the latest changes from the base branch (<code>develop</code> or <code>main</code>) to minimize merge conflicts and ensure your code is tested against the most recent version.</p> </li> </ul> <p>By following these guidelines, we ensure our pull requests are clear, actionable, and easy to review, leading to faster merges and higher code quality.</p>"},{"location":"teams/fullstack/development/20_code_review_process/","title":"Code Review Process","text":"<p>A thorough code review process helps us maintain high quality, consistency, and reliability in our codebase. The following guidelines outline our expectations and workflow for reviewing pull requests:</p>"},{"location":"teams/fullstack/development/20_code_review_process/#review-requirements","title":"Review Requirements","text":"<ul> <li> <p>Approval   Every pull request must receive at least one approving review before it can be merged.</p> </li> <li> <p>Passing Checks   All automated PR checks (CI, Dangerfile, tests, etc.) must pass before merging.</p> </li> <li> <p>Draft PRs   Draft pull requests are welcome for early feedback, but they are not reviewed until marked as \"Ready for Review.\"</p> </li> <li> <p>Comment Resolution   All reviewer comments must be addressed and resolved before merging. If a discussion is ongoing, the PR should not be merged.</p> </li> </ul>"},{"location":"teams/fullstack/development/20_code_review_process/#reviewer-assignment","title":"Reviewer Assignment","text":"<ul> <li>Assigning Reviewers   The PR author is responsible for assigning at least one appropriate reviewer, ideally someone familiar with the relevant codebase or feature area.</li> </ul>"},{"location":"teams/fullstack/development/20_code_review_process/#review-best-practices","title":"Review Best Practices","text":"<ul> <li> <p>Test Significant Changes   For larger or riskier PRs, reviewers should check out the branch and run the code locally to verify functionality.</p> </li> <li> <p>Ask for Clarification   If any part of the code is unclear, reviewers should ask questions or request additional explanations. Authors are expected to respond promptly and clarify as needed.</p> </li> <li> <p>Leverage AI Tools   Reviewers are encouraged to use Copilot and CodeRabbit to gain automated insights, suggestions, and code analysis during the review process.</p> </li> </ul>"},{"location":"teams/fullstack/development/20_code_review_process/#merging-pull-requests","title":"Merging Pull Requests","text":"<ul> <li> <p>Small/Solo Projects:   You may use rebase and merge to keep a linear commit history.</p> </li> <li> <p>Medium and Large Collaborative Projects:   Use merge or squash and merge to preserve context and simplify history. Choose the method that best fits the team\u2019s workflow and the nature of the changes.</p> </li> </ul>"},{"location":"teams/fullstack/development/20_code_review_process/#additional-guidelines","title":"Additional Guidelines","text":"<ul> <li> <p>Respectful and Constructive Feedback   All feedback should be respectful, specific, and focused on the code, not the coder.</p> </li> <li> <p>Continuous Improvement   Use code reviews as an opportunity to share knowledge, reinforce best practices, and help each other grow as engineers.</p> </li> </ul>"},{"location":"teams/fullstack/development/20_code_review_process/#force-pushing-policy","title":"Force Pushing Policy","text":"<ul> <li> <p>No Force Pushes to Shared Branches   Never force push (<code>git push --force</code> or <code>--force-with-lease</code>) to shared branches such as <code>main</code>, <code>develop</code>, or <code>staging</code>. Force pushing to shared branches can overwrite teammates\u2019 work and disrupt the project history, leading to confusion and potential data loss.</p> </li> <li> <p>Feature and Bugfix Branches   Force pushing is allowed only on your own feature or bugfix branches if necessary (e.g., after a rebase or to clean up commit history). Before force pushing, ensure no one else is collaborating on your branch and communicate if needed.</p> </li> </ul>"},{"location":"teams/fullstack/development/20_code_review_process/#github-branch-protection-and-pr-rules","title":"GitHub Branch Protection and PR Rules","text":"<ul> <li> <p>Branch Protection Rules   We configure GitHub branch protection rules to enforce our workflow and safeguard important branches:</p> <ul> <li>Require at least one approving review before merging.</li> <li>Require all status checks to pass before merging.</li> <li>Prevent force pushes to protected branches (<code>main</code>, <code>develop</code>, <code>staging</code>).</li> <li>Require branches to be up to date before merging.</li> <li>Optionally, restrict who can push to or merge into protected branches.</li> </ul> </li> <li> <p>Pull Request Settings   In repository settings, we enable options such as:</p> <ul> <li>Allowing merge, squash, or rebase merges according to project size and needs.</li> <li>Using PR templates for consistency.</li> <li>Enforcing code review limits so only authorized collaborators can approve or request changes.</li> </ul> </li> <li> <p>These rules help maintain a stable and reliable codebase, reduce risk of errors, and ensure a smooth collaboration process for all contributors.</p> </li> </ul> <p>By following this process, we ensure that every change merged into our codebase is reviewed, tested, and aligned with our standards.</p>"},{"location":"teams/fullstack/development/30_project_setup/","title":"Project Setup","text":""},{"location":"teams/fullstack/development/30_project_setup/#project-setup","title":"Project Setup","text":"<p>This guide walks you through setting up a new project in the Futured Github organization, including repository creation, template usage, and initial configuration.</p>"},{"location":"teams/fullstack/development/30_project_setup/#1-github-repository-setup","title":"1. GitHub Repository Setup","text":""},{"location":"teams/fullstack/development/30_project_setup/#create-repository-in-futured-organization","title":"Create Repository in Futured Organization","text":"<ol> <li>Navigate to Futured Organization</li> <li>Go to https://github.com/futuredapp</li> <li> <p>Click \"New repository\"</p> </li> <li> <p>Repository Configuration </p><pre><code>Repository name: your-project-name\nDescription: Brief description of the project\nVisibility: Private\nInitialize with: Don't initialize (we'll use templates)\n</code></pre><p></p> </li> </ol>"},{"location":"teams/fullstack/development/30_project_setup/#branch-protection-rules","title":"Branch Protection Rules","text":"<p>Set up branch protection for the <code>main</code> and <code>dev</code> branches:</p>"},{"location":"teams/fullstack/development/30_project_setup/#main-branch-protection","title":"Main Branch Protection","text":"<pre><code>Branch name pattern: main\nRequire a pull request before merging: \u2713\nRequire approvals: 1\nDismiss stale PR approvals when new commits are pushed: \u2713\nRequire review from code owners: \u2713\nRequire status checks to pass before merging: \u2713\nRequire branches to be up to date before merging: \u2713\nRestrict pushes that create files larger than 100 MB: \u2713\n</code></pre>"},{"location":"teams/fullstack/development/30_project_setup/#dev-branch-protection","title":"Dev Branch Protection","text":"<pre><code>Branch name pattern: dev\nRequire a pull request before merging: \u2713\nRequire approvals: 1\nDismiss stale PR approvals when new commits are pushed: \u2713\nRequire status checks to pass before merging: \u2713\nRequire branches to be up to date before merging: \u2713\n</code></pre>"},{"location":"teams/fullstack/development/30_project_setup/#2-project-template-setup","title":"2. Project Template Setup","text":""},{"location":"teams/fullstack/development/30_project_setup/#access-internal-template-repository","title":"Access Internal Template Repository","text":"<p>Our internal template repository contains pre-configured templates for common project types.</p> <p>Note: These templates are currently internal to the Futured organization and not publicly available. We plan to open-source these templates in the future to share our best practices with the broader developer community.</p>"},{"location":"teams/fullstack/development/30_project_setup/#available-templates","title":"Available Templates","text":"<ol> <li>REST or GraphQL API inside NestJs project</li> <li>PostgreSQL or MongoDB database connection</li> <li>Vue.js or Nuxt frontend for administration</li> <li>Github Actions</li> <li>Terraform scripts</li> </ol>"},{"location":"teams/fullstack/development/30_project_setup/#template-usage-process","title":"Template Usage Process","text":""},{"location":"teams/fullstack/development/30_project_setup/#update-packagejson","title":"Update Package.json","text":"<pre><code>{\n  \"name\": \"your-project-name\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Your project description\",\n     \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"git+[https://github.com/futuredapp/your-project-name.git](https://github.com/futuredapp/your-project-name.git)\"\n   },\n  \"author\": \"Futured\",\n  \"license\": \"MIT\"\n}\n</code></pre>"},{"location":"teams/fullstack/development/30_project_setup/#update-docker-configuration","title":"Update Docker Configuration","text":"<pre><code># docker-compose.dist.yml\nversion: '3.7'\n\nservices:\n  postgres:\n    environment:\n      POSTGRES_DB: your-project-db\n      POSTGRES_USER: your-project-user\n      POSTGRES_PASSWORD: your-project-password\n\n  api:\n    environment:\n      DATABASE_URL: postgresql://your-project-user:your-project-password@postgres/your-project-db\n      # Update other environment variables as needed\n</code></pre>"},{"location":"teams/fullstack/development/30_project_setup/#update-environment-variables","title":"Update Environment Variables","text":"<pre><code># .env.example\nNODE_ENV=development\nPORT=3000\nDATABASE_URL=postgresql://user:password@localhost:5432/database\n# Add project-specific variables\n</code></pre>"},{"location":"teams/fullstack/development/30_project_setup/#customize-template-code","title":"Customize Template Code","text":"<ol> <li> <p>Remove Template-Specific Code </p><pre><code># Remove example endpoints, models, and services\nrm -rf src/examples\nrm -rf src/template-*\n</code></pre><p></p> </li> <li> <p>Update Application Configuration </p><pre><code>// src/app.module.ts\n@Module({\n  imports: [\n    // Keep only what you need\n    DatabaseModule,\n    AuthModule,\n    // Add your modules\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n</code></pre><p></p> </li> <li> <p>Update Database Schema </p><pre><code>-- Remove template tables and create your own\nDROP TABLE IF EXISTS template_examples;\n-- Add your tables\n</code></pre><p></p> </li> </ol>"},{"location":"teams/fullstack/development/30_project_setup/#3-readme-setup","title":"3. README Setup","text":""},{"location":"teams/fullstack/development/30_project_setup/#create-comprehensive-readmemd","title":"Create Comprehensive README.md","text":"<pre><code># Project Name\n\nBrief description of what this project does and why it exists.\n\n## \ud83d\ude80 Quick Start\n\n### Prerequisites\n- Node.js (version specified in .nvmrc)\n- Docker Desktop\n- Git\n\n### Installation\n```bash\n # Clone the repository\n git clone [git@github.com:futuredapp/your-project-name.git](https://github.com/futuredapp/your-project-name.git)\n cd your-project-name\n\n# Install dependencies\nnpm install\n\n# Copy environment template\ncp docker-compose.dist.yml docker-compose.yml\n\n# Edit environment variables\nnano docker-compose.yml\n\n# Start the application\ndocker-compose up -d\n</code></pre>"},{"location":"teams/fullstack/development/30_project_setup/#4-set-up-cicd-pipeline","title":"4. Set Up CI/CD Pipeline","text":"<ol> <li>Copy Template Workflows</li> <li>Customize Workflows for Your Project</li> <li>Environment secrets are configured in the cloud deployment platform, no local secrets management required</li> </ol>"},{"location":"teams/fullstack/docs/00_code_docs/","title":"Code Documentation","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/docs/10_api_docs/","title":"API Documentation","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/intro/00_mission/","title":"Mission & Values","text":"<p>We are a dedicated team of full-stack engineers focused on building and maintaining web applications and backends. Our mission is to create high-quality, user-friendly software that meets the needs of our clients and users. We value collaboration, innovation, and continuous improvement in our work.</p>"},{"location":"teams/fullstack/intro/00_mission/#our-values","title":"Our Values","text":"<ul> <li>Clean, maintainable, and well-tested code. Every application is built with the highest standards of quality in mind.</li> <li>Every technical decision is guided by the needs of our clients. We prioritize usability and reliability.</li> <li>We believe in the power of open-source software and actively contribute to the community.</li> <li>Technology around us is always changing, and we embrace it. We are committed to continuous learning and improvement.</li> <li>Protecting user data is non-negotiable. We integrate security and privacy best practices into every stage of our development process.</li> <li>We love to experiment and push boundaries, but we do so responsibly. We balance innovation with stability, ensuring that our solutions are both cutting-edge and dependable.</li> </ul>"},{"location":"teams/fullstack/security/00_auth/","title":"Authentication","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/security/10_privacy/","title":"Privacy","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/tech_stack/00_frontend/","title":"Frontend","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/tech_stack/10_backend/","title":"Backend","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/tech_stack/20_database/","title":"Database","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/tech_stack/30_devops/","title":"DevOps","text":"<p>Work in progress</p>"},{"location":"teams/fullstack/tech_stack/40_integrations/","title":"Integrations","text":"<p>Work in progress</p>"},{"location":"teams/ios/","title":"Overview","text":""},{"location":"teams/ios/#ios-team","title":"iOS Team","text":"<p>Welcome to the iOS section of the Futured Engineering Handbook. This area contains our team's guidelines, best practices, and workflows for iOS development.</p>"},{"location":"teams/ios/#key-sections","title":"Key Sections","text":""},{"location":"teams/ios/#architecture-futured-ios-architecture","title":"Architecture - Futured iOS architecture","text":""},{"location":"teams/ios/#builds-informations-about-project-configurations","title":"Builds - Informations about project configurations","text":""},{"location":"teams/ios/#cicd-informations-about-futureds-cicd","title":"CI/CD - Informations about Futured's CI/CD","text":""},{"location":"teams/ios/#customer-account-what-we-need-to-build-an-app-to-customers-account","title":"Customer Account - What we need to build an app to customer's account","text":""},{"location":"teams/ios/#git-flow-recommended-git-flow","title":"Git Flow - Recommended git flow","text":""},{"location":"teams/ios/#localization-localization","title":"Localization - Localization","text":""},{"location":"teams/ios/#new-project-how-to-start-a-new-project","title":"New Project - How to start a new project","text":""},{"location":"teams/ios/#accessibility-accessibility-basics","title":"Accessibility - Accessibility basics","text":""},{"location":"teams/ios/#release-how-to-create-a-release-build","title":"Release - How to create a release build","text":""},{"location":"teams/ios/ios_a11y/","title":"Accessibility","text":""},{"location":"teams/ios/ios_a11y/#accessibility-european-accessibility-act-2025-eaa","title":"Accessibility + European Accessibility Act 2025 (EAA)","text":"<p>Last update: October 2025</p> <p>Disclaimer</p> <p>The purpose of this document is only to provide a simple cheatsheet of what you, as a developer, have to bear in mind. To be fully EAA compliant, the guide must also address the mandatory accessibility requirements for multimedia content, user support processes and documentation, and specific app functionalities like adjustable time limits. Also, to fully comply with the EAA, you must provide fully accessible customer support, documentation, and a public Accessibility Statement, not just an accessible app.</p>"},{"location":"teams/ios/ios_a11y/#key-deadlines-and-enforcement","title":"Key Deadlines and Enforcement","text":"<p>Compliance Deadline: June 28, 2025</p> <ul> <li>All new products and services launched within the EU market after this date must comply with the EAA requirements. Existing services have a transition period and must be compliant by June 28, 2030!</li> <li>The EAA is not a recommendation; it is a legal requirement. Enforcement will be handled by designated authorities within each EU member state.</li> <li>Who is affected? The act applies to any company, regardless of its location, that sells covered products or services to consumers within the European Union.</li> <li>Penalties for Non-Compliance: While specific penalties are determined by each member state, they are designed to be \"effective, proportionate, and dissuasive.\" They can include:<ul> <li>Significant fines.</li> <li>Withdrawal of the non-compliant product/service from the market.</li> <li>Public notices about the non-compliance.</li> </ul> </li> </ul>"},{"location":"teams/ios/ios_a11y/#what-app-categories-are-required-for-compliance","title":"What app categories are required for compliance","text":"<p>Quote</p> <p>The EAA specifically covers mobile apps in certain areas, while this doesn\u2019t cover all apps, it\u2019s safe to say these categories make up a significant section of mobile apps available. </p> <ul> <li>E-commerce services: Any app selling products or services.</li> <li>Banking services: Mobile banking apps.</li> <li>Transport services: Apps for buying tickets for air, bus, rail, and water transport, as well as real-time travel information.</li> <li>E-books: Apps for reading and distributing e-books.</li> <li>Audiovisual media services: Streaming services and on-demand platforms.</li> <li>Access to electronic communication services: Apps for messaging, email, and calling.</li> </ul>"},{"location":"teams/ios/ios_a11y/#what-are-the-basics-to-conform-the-eaa","title":"What are the basics to conform the EAA","text":"<p>The EAA's requirements are based on the globally recognized Web Content Accessibility Guidelines (WCAG). Conformance is built on four core principles, often remembered by the acronym POUR. Your app must be:</p>"},{"location":"teams/ios/ios_a11y/#1-perceivable","title":"1. Perceivable","text":"<ul> <li>Users must be able to perceive the information being presented; it can't be invisible to all of their senses.</li> <li>Provide text alternatives: All non-text content (icons, images) must have a text alternative. Use .accessibilityLabel for this. <pre><code>Image(\"profile-icon\")\n    .accessibilityLabel(\"User Profile\")\n</code></pre></li> <li>Support text resizing: Your app must respect the user's font size settings. Use Dynamic Type with system text styles (e.g., .body, .headline) instead of fixed font sizes.</li> <li>Ensure sufficient contrast: Text and important UI elements must have a color contrast ratio of at least 4.5:1 against the background. For large text, the ratio is 3:1.</li> <li>Don't rely on color alone: Convey information using more than just color. Support the Differentiate Without Color setting. For example, use an icon in addition to a red color for an error state.</li> </ul>"},{"location":"teams/ios/ios_a11y/#2-operable","title":"2. Operable","text":"<ul> <li>Users must be able to operate the interface; the interface cannot require interaction that a user cannot perform.</li> <li>Support assistive technologies: All functionality must be operable through assistive technologies like VoiceOver, Switch Control, and Voice Control. Test your app thoroughly with VoiceOver.</li> <li>Provide large touch targets: Interactive elements should have a minimum touch target size of 44x44 points to be easily tappable.</li> <li>Respect motion settings: Your app must check for and respect the Reduce Motion setting. Disable non-essential animations when it's enabled.</li> <li>Avoid seizure triggers: Content must not flash more than three times in any one-second period.</li> </ul>"},{"location":"teams/ios/ios_a11y/#3-understandable","title":"3. Understandable","text":"<ul> <li>Users must be able to understand the information as well as the operation of the user interface.</li> <li>Use clear language: Write in simple, clear language. Avoid jargon.</li> <li>Be consistent: Use consistent navigation, icons, and terminology throughout your app. A \"Save\" button should always look and behave the same way.</li> <li>Provide clear error messages: When an error occurs, explain what went wrong and how the user can fix it. Don't just say \"Invalid input.\"</li> </ul>"},{"location":"teams/ios/ios_a11y/#4-robust","title":"4. Robust","text":"<ul> <li>Content must be robust enough that it can be interpreted reliably by a wide variety of user agents, including assistive technologies.</li> <li>Use standard components: Whenever possible, use standard SwiftUI and UIKit components. They have accessibility built-in.</li> <li>Define accessibility traits: For custom components, explicitly define their roles using accessibility traits like .isButton or .isHeader so assistive tech knows what they are.</li> <li>Manage focus: Ensure the VoiceOver focus order is logical and predictable, especially in complex views or after presenting a new screen. Use the .accessibilitySortPriority and .accessibilityElement(children: .contain) modifiers to manage focus.</li> </ul>"},{"location":"teams/ios/ios_a11y/#recommended-views","title":"Recommended Views","text":""},{"location":"teams/ios/ios_a11y/#1-dynamic-horizontal-stack","title":"1. Dynamic Horizontal Stack","text":"<p>will change from horizontal to vertical stack once dynamic font exceeds certain size</p> DynamicHStack <pre><code>import SwiftUI\n\nstruct DynamicHStack&lt;Content: View&gt;: View {\n    struct VStackConfig {\n        let spacing: CGFloat?\n        let alignment: HorizontalAlignment\n\n        init(spacing: CGFloat? = nil, alignment: HorizontalAlignment = .leading) {\n            self.spacing = spacing\n            self.alignment = alignment\n        }\n    }\n\n    struct HStackConfig {\n        let spacing: CGFloat?\n        let alignment: VerticalAlignment\n\n        init(spacing: CGFloat? = nil, alignment: VerticalAlignment = .center) {\n            self.spacing = spacing\n            self.alignment = alignment\n        }\n    }\n\n    @Environment(\\.sizeCategory) private var sizeCategory\n\n    private let breakingSize: ContentSizeCategory\n    private let verticalConfig: VStackConfig\n    private let horizontalConfig: HStackConfig\n    private let content: Content\n\n    init(\n        breakingSize: ContentSizeCategory = .extraExtraExtraLarge, // swiftlint:disable:this function_default_parameter_at_end\n        hStackConfig: HStackConfig = .init(),\n        vStackConfig: VStackConfig = .init(),\n        @ViewBuilder content: () -&gt; Content\n    ) {\n        self.breakingSize = breakingSize\n        self.verticalConfig = vStackConfig\n        self.horizontalConfig = hStackConfig\n        self.content = content()\n    }\n\n    init(\n        breakingSize: ContentSizeCategory = .extraExtraExtraLarge, // swiftlint:disable:this function_default_parameter_at_end\n        spacing: CGFloat,\n        @ViewBuilder content: () -&gt; Content\n    ) {\n        self.init(\n            breakingSize: breakingSize,\n            hStackConfig: .init(spacing: spacing),\n            vStackConfig: .init(spacing: spacing),\n            content: content\n        )\n    }\n\n    init(\n        breakingSize: ContentSizeCategory = .extraExtraExtraLarge, // swiftlint:disable:this function_default_parameter_at_end\n        hSpacing: CGFloat,\n        vSpacing: CGFloat,\n        @ViewBuilder content: () -&gt; Content\n    ) {\n        self.init(\n            breakingSize: breakingSize,\n            hStackConfig: .init(spacing: hSpacing),\n            vStackConfig: .init(spacing: vSpacing),\n            content: content\n        )\n    }\n\n    var body: some View {\n        if sizeCategory &gt; breakingSize {\n            vStack\n        } else {\n            hStack\n        }\n    }\n\n    private var hStack: some View {\n        HStack(alignment: horizontalConfig.alignment, spacing: horizontalConfig.spacing) {\n            content\n        }\n    }\n\n    private var vStack: some View {\n        VStack(alignment: verticalConfig.alignment, spacing: verticalConfig.spacing) {\n            content\n        }\n    }\n}\n</code></pre>"},{"location":"teams/ios/ios_a11y/#2-iconview","title":"2. IconView","text":"<ul> <li>automatically scales the icon as the text size is changed</li> <li>should be used only for icons, eg. not for illustrations</li> </ul> <p>Note</p> <p>Only \"functional\" icons should be scaled. Other icons that are only \"decorative\" should be hidden once a bigger font is applied. Recommendation is hiding after exceeding the <code>UIContentSizeCategory.extraExtraExtraLarge</code> size.</p> <ul> <li>Functional icons could be considered as icons in buttons, text inputs etc.</li> </ul> IconView <pre><code>import SwiftUI\n\nstruct IconView: View {\n    @ScaledMetric private var size: CGFloat\n\n    let resource: ImageResource\n\n    init(\n        _ resource: ImageResource,\n        size: CGFloat,\n        relativeTo textStyle: Font.TextStyle = .body\n    ) {\n        self.resource = resource\n        self._size = ScaledMetric(wrappedValue: size, relativeTo: textStyle)\n    }\n\n    var body: some View {\n        Image(resource)\n            .resizable()\n            .scaledToFit()\n            .frame(width: size, height: size)\n    }\n}\n\n#Preview(traits: .sizeThatFitsLayout) {\n    // FIXME: Provide valid `ImageResource` for this preview\n    IconView(.Icons.checkmarkCircle, size: 24)\n}\n</code></pre>"},{"location":"teams/ios/ios_a11y/#3-reducible-animation-modifier","title":"3. Reducible Animation Modifier","text":"<ul> <li>applies animation only when reduce motion option is turned off</li> </ul> ReducibleAnimationModifier <pre><code>import SwiftUI\n\nstruct ReducibleAnimationModifier&lt;Value: Equatable&gt;: ViewModifier {\n    @Environment(\\.accessibilityReduceMotion) private var reduceMotion\n\n    let animation: Animation\n    let value: Value\n\n    func body(content: Content) -&gt; some View {\n        content\n            .animation(reduceMotion ? nil : animation, value: value)\n    }\n}\n\nstruct ReducibleAnimationModifier_Previews: PreviewProvider {\n    static var previews: some View {\n        Text(\"Hello, world!\")\n            .modifier(ReducibleAnimationModifier(animation: .easeOut(duration: 0.15), value: true))\n    }\n}\n\nextension View {\n    // swiftlint:disable:next function_default_parameter_at_end\n    func reducibleAnimation&lt;Value: Equatable&gt;(_ animation: Animation = .easeInOut(duration: 0.15), value: Value) -&gt; some View {\n        modifier(ReducibleAnimationModifier(animation: animation, value: value))\n    }\n}\n</code></pre>"},{"location":"teams/ios/ios_a11y/#4-dynamic-fonts","title":"4. Dynamic fonts","text":"<p>We already have this sorted. All you have to do is add FuturedKit to your project and use it's <code>TextStyle.swift</code> implementation.</p>"},{"location":"teams/ios/ios_a11y/#supporting-voiceover","title":"Supporting VoiceOver","text":"<p>VoiceOver is the screen reader built into iOS that enables visually impaired users to interact with your app. Supporting it is not just a best practice; it is a fundamental requirement for EAA compliance. If a user cannot understand and operate your app with VoiceOver, it is not accessible.</p> <p>Good VoiceOver support is built on a few core principles.</p> <p>The Golden Rules of VoiceOver</p> <p>Every interactive element MUST be accessible. VoiceOver users can only interact with what the accessibility system can see. Buttons, sliders, toggles, and all other controls must be exposed to VoiceOver.</p> <p>Every element needs a clear label. If an element doesn't have a visible text title, you must provide a concise accessibilityLabel. VoiceOver should announce what the element is (e.g., \"Add to cart,\" \"User profile,\" \"Settings\").</p> <p>The navigation order must be logical. The order in which VoiceOver moves through elements (by swiping left or right) should follow the visual flow of the screen. In SwiftUI, this is usually handled automatically, but you must verify it for complex layouts.</p> <p>Group related information. Elements that form a single piece of information should be grouped. For example, a label \"Name\" and the value \"John Appleseed\" should be read together as one item, not two separate ones.</p> <p>Core Modifiers for VoiceOver Support</p> <p>SwiftUI provides a powerful set of view modifiers to implement the rules above.</p> Labels: What is this? (.accessibilityLabel) <p>Use this for elements without visible text, like icon-only buttons. The label should be short and descriptive. It should not include the element's type (e.g., use \"Settings,\" not \"Settings button\").</p> <pre><code>Button(action: { /* ... */ }) {\n    Image(systemName: \"gear\")\n}\n.accessibilityLabel(\"Settings\")\n</code></pre> Traits: What kind of element is this? (.accessibilityAddTraits) <p>Traits add context by telling VoiceOver the element's role. This is crucial for custom components. For standard components like <code>Button</code> or <code>Toggle</code>, traits are often added automatically.</p> <ul> <li><code>.isButton</code>: The element acts as a button.</li> <li><code>.isHeader</code>: The element is a section header.</li> <li><code>.isSelected</code>: The element is currently selected (e.g., a tab).</li> <li><code>.isLink</code>: The element opens a URL.</li> </ul> <pre><code>Text(\"Personal Information\")\n    .font(.headline)\n    .accessibilityAddTraits(.isHeader)\n</code></pre> Values: What is its current state? (.accessibilityValue) <p>Use this to communicate the current value of a control that can change, like a slider, toggle, or text field.</p> <pre><code>Slider(value: $volume, in: 0...100)\n    .accessibilityValue(\"\\(Int(volume)) percent\")\n\nToggle(\"Wi-Fi\", isOn: $isWifiEnabled)\n    // No explicit value needed. VoiceOver reads the state\n    // from the Toggle itself (\"On\" or \"Off\").\n</code></pre> Hints: What will happen? (.accessibilityHint) <p>A hint provides extra information about the result of an action. Use them sparingly, only when the action's result isn't obvious from the label. VoiceOver reads the hint after a short pause.</p> <pre><code>Button(\"Clear History\") { /* ... */ }\n    .accessibilityHint(\"This action cannot be undone.\")\n</code></pre> Combining &amp; Hiding Elements <ul> <li>Combining: Use <code>.accessibilityElement(children: .combine)</code> to group multiple views into a single VoiceOver element. This is perfect for key-value pairs.</li> <li>Hiding: Use <code>.accessibilityHidden(true)</code> to hide purely decorative elements (like background patterns or illustrative flourishes) that add no value for VoiceOver users.</li> </ul> <pre><code>// Combining example\nHStack {\n    Text(\"Status:\")\n    Text(\"Confirmed\")\n        .font(.body.bold())\n}\n.accessibilityElement(children: .combine) // Reads: \"Status: Confirmed\"\n\n// Hiding example\nImage(\"decorative-background-swoosh\")\n    .accessibilityHidden(true)\n</code></pre>"},{"location":"teams/ios/ios_a11y/#testing-voiceover","title":"Testing VoiceOver","text":"<p>You cannot ensure VoiceOver support without testing it.</p> <p>Accessibility Inspector: Use Xcode's built-in tool to preview labels, traits, and navigation order without leaving your Mac.</p> <p>Real Device Testing: The best way to test is on an iPhone or iPad. Go to Settings &gt; Accessibility &gt; VoiceOver and turn it on. Navigate your app using standard VoiceOver gestures:</p> <ul> <li> <p>Swipe Right/Left: Move to the next/previous element.</p> </li> <li> <p>Double-Tap: Activate the selected element (tap a button).</p> </li> <li> <p>Three-Finger Swipe: Scroll.</p> </li> </ul>"},{"location":"teams/ios/ios_a11y/#beyond-the-app-ui","title":"Beyond the App UI","text":"<ul> <li>EAA compliance extends beyond just the application's interface.</li> <li>Provide Accessible Support: Your customer support channels (like helpdesks, chat, email, and phone support) must also be accessible.</li> <li>Maintain Documentation: You must prepare and maintain documentation that describes how your product or service meets the accessibility requirements. This often takes the form of an Accessibility Statement.</li> </ul>"},{"location":"teams/ios/ios_a11y/#sources","title":"Sources","text":"<ul> <li>Apple's Official Accessibility Documentation</li> <li>WCAG 2.1 Guidelines (W3C)</li> <li>Hacking with Swift - Accessibility</li> <li>understanding-the-european-accessibility-act-eaa</li> <li>mobilea11y blog</li> </ul>"},{"location":"teams/ios/ios_architecture/","title":"Architecture","text":""},{"location":"teams/ios/ios_architecture/#ios-architecture","title":"iOS Architecture","text":"<p>This page describes the architecture used in our futuredapp/FuturedKit repository.</p> <p>The architecture is organized into layers, each with a specific responsibility. This ensures improved code organization, testability, and scalability while minimizing component coupling. We follow modern Swift and SwiftUI best practices.</p> <p> </p>"},{"location":"teams/ios/ios_architecture/#overall-architecture","title":"Overall Architecture","text":""},{"location":"teams/ios/ios_architecture/#user-interface","title":"User Interface","text":"<p>The User Interface is built with SwiftUI using Components and ComponentModels. A Component and its corresponding ComponentModel form a single \"scene\".</p> <ul> <li>each <code>Component&lt;Model&gt;</code> is a <code>struct</code> conforming to <code>View</code>, parameterized with a <code>Model</code> that is retained as an <code>ObservableObject</code></li> <li>components bind to a <code>ComponentModelProtocol</code> to allow mock implementations for seamless scene testing (e.g., <code>#Preview</code> feedback)</li> <li>user interactions are forwarded to the <code>ComponentModel</code> as simple function calls (e.g., <code>model.onButtonTapped()</code>)</li> </ul>"},{"location":"teams/ios/ios_architecture/#presentation-layer","title":"Presentation Layer","text":"<p>At the presentation layer, we employ an extended MVVM-C style approach with Flow Coordinators and optional Flow Providers.</p> <ul> <li>Flow Coordinators conform to <code>Coordinator</code> and manage creation, lifetime, navigation stacks, tabs, and modal presentations</li> <li><code>TabViewFlow</code> for tabbed flows</li> <li><code>NavigationStackFlow</code> for push/pop flows</li> <li>coordinators control their flow using events emitted by <code>ComponentModels</code></li> <li>Flow Providers encapsulate reusable sub-flows shared across multiple coordinators</li> </ul>"},{"location":"teams/ios/ios_architecture/#data-domain-layer","title":"Data &amp; Domain Layer","text":"<p>This layer handles shared state, business logic, and dependencies.</p>"},{"location":"teams/ios/ios_architecture/#datacache","title":"DataCache","text":"<p>The <code>DataCache</code> is an <code>actor</code>-based, generic container that serves as the Single Source of Truth for shared application data.</p> <ul> <li>serializes all write operations for thread safety</li> <li><code>ComponentModels</code> subscribe to the <code>DataCache</code> to receive state updates</li> <li>can be used globally (one per app) or privately within a coordinator to provide flow-specific data</li> </ul>"},{"location":"teams/ios/ios_architecture/#services","title":"Services","text":"<p>Business logic, such as networking or data processing, is encapsulated in <code>Services</code>.</p> <ul> <li>responsible for performing external operations (e.g., fetching data from an API)</li> <li>used by <code>ComponentModels</code> to trigger actions and update the <code>DataCache</code> if needed</li> </ul>"},{"location":"teams/ios/ios_architecture/#container","title":"Container","text":"<p>The <code>Container</code> acts as a simple dependency injection hub. It is created at the app's root and passed down to each <code>Coordinator</code>. It is responsible for instantiating and providing shared dependencies such as the <code>DataCache</code> and other <code>Services</code>.  </p>"},{"location":"teams/ios/ios_builds/","title":"Builds","text":""},{"location":"teams/ios/ios_builds/#builds","title":"Builds","text":"<p>There are three build configurations.</p>"},{"location":"teams/ios/ios_builds/#debug-builds","title":"Debug builds","text":"<p>Debug builds are created in Xcode by developers.</p>"},{"location":"teams/ios/ios_builds/#how-to-run-a-debug-build-on-device","title":"How to run a debug build on device","text":"<ol> <li> <p>Environment setup - follow this well-written and maintained manual: </p> <ul> <li>The fastest and easiest way to install Ruby on a Mac</li> </ul> </li> <li> <p>From Terminal in the project folder:</p> <ul> <li> <p>install necessary ruby tools:     </p><pre><code>bundle install\n</code></pre><p></p> </li> <li> <p>download development certificate and provisioning profiles:     </p><pre><code>bundle exec fastlane provisioning\n</code></pre>     you may be asked to provide match password, please use <code>Fastlane Match password</code> entry from Futured's Bitwarden<p></p> </li> </ul> </li> <li> <p>Build using Xcode, select your device in run destinations</p> <p></p> </li> </ol> Haven't you registered your iOS device yet? Follow these instructions."},{"location":"teams/ios/ios_builds/#adding-to-list-of-devices","title":"Adding to list of devices","text":""},{"location":"teams/ios/ios_builds/#get-your-devices-udid","title":"Get your device's UDID","text":"<ol> <li>Connect your device to Mac and unlock it</li> <li> <p>Open Finder</p> <ol> <li>Select your device in Locations</li> <li>In detail, click the grey metadata under your device name until you see UDID section</li> </ol> <p></p> </li> </ol>"},{"location":"teams/ios/ios_builds/#register-your-device","title":"Register your device","text":"<p>To be able to run a debug build on your device you need to add it to the company's private fastlane repository. Update file <code>device-list.txt</code> file. See closed PRs for inspiration or follow these steps:</p> <p>Each device has to have three columns separated by tabs.</p> <ol> <li>Device UDID</li> <li>Descriptive name of the device</li> <li>Operation system</li> </ol> <p><code>UDID   Owner - Device model    ios/mac</code></p>"},{"location":"teams/ios/ios_builds/#regenerating-the-profiles-for-new-devices","title":"Regenerating the profiles for new devices","text":"<p>Project profiles won't regenerate automatically after adding a new device. To regenerate the profiles, follow these steps:</p> <ol> <li>Retrieve the ops Apple ID password from Bitwarden</li> <li>Ask someone with ops access to provide you with an authentication code</li> <li> <p>In the project directory, call the following command from Terminal:     </p><pre><code>MATCH_FORCE=true bundle exec fastlane update_provisioning\n</code></pre><p></p> <p>If <code>MATCH_FORCE</code> environment variable is not provided the profiles are updated only when invalid.</p> </li> </ol>"},{"location":"teams/ios/ios_builds/#beta-builds","title":"Beta builds","text":"<p>Beta builds are mainly used by our QA team. There's possibility to add beta build to external testing and share it via link or email invitation if needed (see attached screenshot). External beta build has to go through app review. It can take longer for the first build or after some longer period without uploading a new build but it's usually approved immediately. Always send tested builds to external testing!</p> <p>Although it is possible to invite external users to Futured's App Store Connect and add them to internal testing we prefer external testing for the following reasons:</p> <ul> <li>internal builds are automatically submited with merged pull request =&gt;\u00a0these builds should be tested first which cannot be guaranteed in internal testing</li> <li>security concerns</li> </ul> <p></p>"},{"location":"teams/ios/ios_builds/#production-builds","title":"Production builds","text":"<p>Production builds can be either distributed via Futured's or customer's App Store Connect account. It is also possible to set up ASC account later and migrate the app (see docs) but we strongly recommend to make a decesion before releasing the first version.</p> App Store submission - first release requirements: <p>Here's a list of requirements to be able to successfuly submit the very first build to app review:</p> <p>How to build a production build</p>"},{"location":"teams/ios/ios_builds/#xcode-project","title":"Xcode project","text":"<ul> <li>app icon</li> </ul>"},{"location":"teams/ios/ios_builds/#app-store-connect","title":"App Store Connect","text":"<ul> <li>release build in TestFlight</li> </ul>"},{"location":"teams/ios/ios_builds/#xy-prepare-for-submission-section","title":"<code>X.Y Prepare for Submission</code> section:","text":"<ul> <li>screenshots iPhone 6.9\", iPad (if supported) 13\"</li> <li>Promotional text (optional, limit 170 chars)<ul> <li>promotional text lets you inform your App Store visitors of any current app features without requiring an updated submission</li> </ul> </li> <li>Description (limit 4000 chars)<ul> <li>a description of your app, detailing features and functionality</li> </ul> </li> <li>Keywords (limit 100 chars)<ul> <li>include one or more keywords that describe your app</li> <li>keywords make App Store search results more accurate</li> <li>separate keywords with an English comma</li> </ul> </li> <li>Support URL</li> <li>Marketing URL (optional)</li> <li>Copyright<ul> <li>the name of the person or entity that owns the exclusive rights to your app,  preceded by the year the rights were obtained (for example, \"2008 Acme Inc.\")</li> <li>do not provide a URL</li> </ul> </li> <li>build (select uploaded build from TestFlight)</li> <li>App Review Information (if applicable)<ul> <li>test account sign in credentials for app review (if there's an account in the app)</li> <li>contact information<ul> <li>first, last name</li> <li>phone, email</li> </ul> </li> </ul> </li> </ul>"},{"location":"teams/ios/ios_builds/#general-app-information-section","title":"<code>General</code> -&gt; <code>App Information</code> section:","text":"<ul> <li>Name (limit 17 chars)</li> <li>Subtitle (optional, limit 30 chars)<ul> <li>a summary of your app that will appear under your app's name on your App Store product page</li> </ul> </li> <li>Content Rights</li> <li>Category<ul> <li>Primary</li> <li>Secondary (optional)</li> </ul> </li> <li>Age Rating</li> </ul>"},{"location":"teams/ios/ios_builds/#app-store-trust-safety-app-privacy-section","title":"<code>App Store</code> -&gt; <code>TRUST &amp; SAFETY</code> -&gt; <code>App Privacy</code> section:","text":"<ul> <li>Privacy Policy URL</li> <li>User Privacy Choices URL (optional)<ul> <li>a URL where users can modify and delete the data collected from the app,  or decide how their data is used and shared</li> </ul> </li> <li>privacy nutrition labels<ul> <li>click <code>Get Started</code> button</li> </ul> </li> </ul>"},{"location":"teams/ios/ios_builds/#app-store-monetization-pricing-and-availability-section","title":"<code>App Store</code> -&gt; <code>MONETIZATION</code> -&gt; <code>Pricing and Availability</code> section:","text":"<ul> <li>Price Schedule<ul> <li>click <code>Add Pricing</code> button</li> </ul> </li> <li>App Availability<ul> <li>click <code>Set Up Availability</code> button</li> </ul> </li> <li>iPhone and iPad Apps on Apple Silicon Macs<ul> <li>Apple Silicon Mac Availability</li> </ul> </li> </ul>"},{"location":"teams/ios/ios_ci_cd/","title":"CI/CD","text":""},{"location":"teams/ios/ios_ci_cd/#cicd","title":"CI/CD","text":"<p>You may be asked to provide match password when calling Fastlane lanes, please use <code>Fastlane Match password</code> entry from Futured's Bitwarden.</p>"},{"location":"teams/ios/ios_ci_cd/#fastlane-configuring","title":"Fastlane configuring","text":"<p>For importing Futured's Fastlane flow to your project, add <code>fastlane/Fastfile</code> to project's folder and insert this code:</p> <pre><code>ENV['APP_NAME'] = 'AppName'\nENV['APP_SCHEME'] = 'AppName'\nENV['APP_IDENTIFIER'] = 'app.futured.app_name'\n# If you use any app's extension (notification, widget, etc.), uncomment next line and fill all the extension names (comma separated):\n#ENV['APP_EXTENSIONS'] = 'extension1,extension2'\n\n# If you want beta builds with dark badge on app icons, uncomment next line:\n#ENV['BADGE_DARK'] = 'true'\n\n# In case the app is released under partner's developer account setup following variables:\n#ENV['APP_IDENTIFIER_CUSTOMER'] = 'cz.our.futuristic.partner'\n#ENV['TEAM_ID_CUSTOMER'] = 'AAAAAAAAAA'\n# Use these steps to get ASC ID: https://stackoverflow.com/a/46415415/3887546 \n#ENV['ASC_TEAM_ID_CUSTOMER'] = '123456'\n#ENV['CUSTOMERS_BRANCH'] = 'partner'\n\n# We use our own macros in the native iOS architecture.\n# So the `-skipMacroValidation` flag is required for builds and tests, to ensure successful builds in CI/CD pipelines.\nENV['ADDITIONAL_BUILD_SETTINGS'] = { xcargs: \"-skipMacroValidation\" }.to_json\nENV['ADDITIONAL_TESTS_SETTINGS'] = { xcargs: \"-skipMacroValidation\" }.to_json\n\nimport_from_git(url: 'git@github.com:futuredapp/fastlane.git')\n</code></pre>"},{"location":"teams/ios/ios_ci_cd/#renew-provisioning-profile","title":"Renew provisioning profile","text":"<p>In the case of an expired provisioning profile (see the attached CI error screenshot \ud83d\udc46) or when adding capabilities, it is necessary to take the following steps:</p> <ul> <li>delete provisioning profile in the Apple Developer portal</li> <li> <p>for renew expired profile run     </p><pre><code>bundle exec fastlane update_provisioning # for debug/beta configuration\n</code></pre> <pre><code>bundle exec fastlane update_release_provisioning # for release configuration\n</code></pre><p></p> </li> <li> <p>for renew profile after adding capabilities run     </p><pre><code>MATCH_FORCE=true bundle exec fastlane update_provisioning # for debug/beta configuration\n</code></pre> <pre><code>MATCH_FORCE=true bundle exec fastlane update_release_provisioning # for release configuration\n</code></pre><p></p> </li> </ul>"},{"location":"teams/ios/ios_ci_cd/#renew-certificate","title":"Renew certificate","text":"<p>In the case of an expired certificate (see the attached CI error screenshot \ud83d\udc46), it is necessary to take the following steps:</p> <ul> <li> <p>delete provisioning profiles related to the given certificate in the Apple Developer portal</p> <ul> <li>there's no need to delete the certificate itself, it will be removed automatically</li> </ul> </li> <li> <p>remove the corresponding development or distribution certificate (both the <code>.cer</code> and <code>.p12</code> files) from the <code>futuredapp/apple-certificates</code> repository</p> <p></p> <ul> <li>for Futured account, find it in the default branch</li> <li>for client's account, find it in the appropriate branch</li> <li>open a PR pointing to the right branch, you can merge it immediately</li> </ul> </li> <li> <p>for renew expired certificate and corresponding profiles run     </p><pre><code>bundle exec fastlane update_provisioning # for debug/beta configuration\n</code></pre> <pre><code>bundle exec fastlane update_release_provisioning # for release configuration\n</code></pre><p></p> </li> </ul>"},{"location":"teams/ios/ios_ci_cd/#adding-existing-certificate-to-the-futuredapple-certificates-repository","title":"Adding existing certificate to the <code>futured/apple-certificates</code> repository","text":"<p>It might be necessary if the client has reached the maximum number of generated certificates on their Apple Developer account.</p> <p>Prerequisites:</p> <ul> <li><code>.cer</code> file</li> <li><code>.p12</code> file (SSL certificate with its private key within a single encrypted file)<ul> <li>it's possible the file is password protected, you need to know the password and remove it<ul> <li>import it into your keychain</li> <li>export it from keychain without a password</li> </ul> </li> </ul> </li> </ul> <p>Clients or previous suppliers should be able to provide this. Note that the certificate can be downloaded from the Apple Developer account, but only the <code>.cer</code> file. If the <code>.p12</code> file is not available, a new certificate must be created and stored securely with its private key.</p> <p>After you obtain necessary files store them to Futured's Bitwarden.</p> <p>Steps:</p> <ol> <li>Create a project branch in <code>futured/apple-certificates</code> repository</li> <li> <p>Import the certificate with following script     </p><pre><code>fastlane match import \\\n\u2014ops@futured.app \\\n--git_url https://github.com/futuredapp/apple-certificates \\\n--app_identifier app.futured.xyz \\ # replace app_identifier\n--team_id XYZXYZXYZX \\ # replace team_id\n--type appstore \\\n--git_branch yourbranch \\ # replace git_branch\n--clone_branch_directly true\n</code></pre><p></p> <ol> <li>you will be sequentially asked to provide the path to<ul> <li>.cer file</li> <li>.p12 file</li> <li>provisioning profile - <code>.mobileprovisioning</code> or <code>.provisioningprofile</code> file<ul> <li>it's optional, ignore it, you will create a new provisioning profile later</li> </ul> </li> <li>match password, please use <code>Fastlane Match password</code> entry from Futured's Bitwarden</li> <li>username, use <code>ops@futured.app</code></li> </ul> </li> </ol> </li> <li> <p>Generate a new release provisioning profile</p> <ul> <li>see Renew provisioning profile on this page</li> </ul> </li> </ol> <p>The import process should look as follows:</p> <p></p>"},{"location":"teams/ios/ios_ci_cd/#add-app-extension","title":"Add app extension","text":"<p>In the case of adding app extension (notification, widget, ...), it is necessary to take the following steps:</p> <ol> <li> <p>Create a new Xcode target</p> <p><code>File -&gt; New -&gt; Target -&gt; ___ Extension</code></p> </li> <li> <p>Edit project's <code>Fastfile</code></p> <ul> <li>add extension name (notification, widget, etc.) to <code>ENV['APP_EXTENSIONS']</code></li> <li>you can add multiple entries separated by comma, for example <pre><code>ENV['APP_EXTENSIONS'] = 'notification,widget'\n</code></pre></li> <li>in Terminal run  <pre><code>bundle exec fastlane create_apps_for_extension\nbundle exec fastlane update_provisioning # for debug/beta configuration\nbundle exec fastlane update_release_provisioning # for release configuration\n</code></pre></li> </ul> </li> <li> <p>Configure the extension for Continuous Deployment</p> <ul> <li>in extension target <code>Signing &amp; Capabilities tab</code><ul> <li>keep the Automatically manage signing checkbox unchecked</li> <li>fill all Bundle identifiers - bundle ids are the same as in main target but with extension name suffix (example: <code>app.futured.{project}.notification</code>)</li> <li>select appropriate provisioning profiles for all configurations</li> </ul> </li> <li>in Manage Schemes, set widget project scheme as Shared (should be by default)</li> </ul> </li> </ol>"},{"location":"teams/ios/ios_customer_account/","title":"Customer Account","text":""},{"location":"teams/ios/ios_customer_account/#customers-account","title":"Customer's Account","text":"<p>To establish our CI flow and be able to deliver builds to customer's App Store Connect account and maintain app submission we need:</p> <ol> <li> <p>add <code>ops@futured.app</code> user to customer's App Store Connect account</p> Steps <ul> <li>go to App Store Connect and login</li> <li>if your account is in more organizations make sure the correct one is selected</li> <li> <p>select <code>Users and Access</code></p> <p></p> </li> <li> <p>click <code>+</code> button</p> <p></p> </li> <li> <p>fill a new user and click <code>Next</code> button</p> <ul> <li>First Name: <code>Futured</code></li> <li>Last Name: <code>Operations</code></li> <li>Email: <code>ops@futured.app</code></li> <li>Roles: <code>App Manager</code></li> <li>Additional Resources: <code>Access to Certificates, Identifiers &amp; Profiles.</code></li> </ul> <p>User's role</p> <p>We need <code>App Manager</code> role to be able to maintain app submission. For more information about App Store Connect roles see documentation.</p> <p>We also need access to Certificates, Identifiers &amp; Profiles to be able to properly setup out CI flow via Fastlane. For more information about Fastlane see documentation.</p> <p></p> </li> <li> <p>select desired app (if created) or keep selection blank and click <code>Invite</code> button</p> The app is created alreadyThe app is not created yet <p></p> <p></p> </li> <li> <p>accept the invitation, you can find credentials in Futured's Bitwarden account (if you don't see it there please contact some senior developer)</p> </li> </ul> Fastlane errors troubleshooting <p>Multiple App Store Connect teams found, please enter the number of the team you want to use:</p> <p>If you don't see newly added organization for <code>ops@futured.app</code></p> <ol> <li>click <code>ops@futured.app</code> user in <code>User and Access</code> tab</li> <li>in <code>Additional Resources</code> section, deselect <code>Access to Certificates, Identifiers &amp; Profiles.</code> and click <code>Save</code> button</li> <li>select <code>Access to Certificates, Identifiers &amp; Profiles.</code> and click <code>Save</code> again</li> </ol> </li> <li> <p>create App Store Connect API key</p> Steps <ul> <li>go to App Store Connect and login</li> <li>if your account is in more organizations make sure the correct one is selected</li> <li> <p>select <code>Users and Access</code></p> <p></p> </li> <li> <p>select:</p> <p></p> First App Store Connect API usage <p>In case you haven't granted App Store Connect API permission yet:</p> <ul> <li>click <code>Request Access</code> button</li> </ul> <p></p> <ul> <li>check the checkbox and click <code>Submit</code> button </li> </ul> <p></p> <ol> <li><code>Integrations</code></li> <li><code>App Store Connect API</code></li> <li><code>Team Keys</code></li> <li>copy <code>Issuer ID</code> and save it to company's Bitwarden (see for example <code>Futured App Store Connect API Key</code> entry, don't forget to select <code>iOS</code> and <code>Operations</code> collections)</li> <li> <p>click <code>+</code> button, fill key name (there's no naming convention), <code>App Manager</code> access role and click <code>Generate</code> button</p> <p></p> <p>Access</p> <p>We need <code>App Manager</code> access to be able to maintain app submission. For more information about App Store Connect roles see documentation.</p> <p>We also need access to Certificates, Identifiers &amp; Profiles to be able to properly setup out CI flow via Fastlane. For more information about Fastlane see documentation.</p> </li> <li> <p>new key will appear in the list, please copy <code>KEY ID</code> and save it to company's Bitwarden (to the same entry as in step <code>d.</code>)</p> </li> <li> <p>key is downloadable only once, please download it and save it to company's Bitwarden (to the same entry as in step <code>d.</code>)</p> <p></p> </li> </ol> </li> <li> <p>add customer's App Store Connect API key to project's repo secrets</p> <ul> <li> <p>go to your project GitHub repo</p> <p></p> <ol> <li>open <code>Settings</code> (you need repo admin role to see <code>Settings</code> option)</li> <li>select <code>Secrets and variables</code> section and <code>Actions</code> subsection</li> <li>click <code>New repository secret</code> button</li> </ol> </li> <li> <p>add following secrets (keep naming!):</p> <ul> <li><code>APP_STORE_CONNECT_API_KEY_ISSUER_ID_CUSTOMER</code> = <code>Issuer ID</code></li> <li><code>APP_STORE_CONNECT_API_KEY_KEY_ID_CUSTOMER</code> = <code>KEY ID</code></li> <li><code>APP_STORE_CONNECT_API_KEY_KEY_CUSTOMER</code> = key content</li> </ul> </li> </ul> <p></p> <ul> <li>result:</li> </ul> <p></p> </li> </ul> </li> </ol>"},{"location":"teams/ios/ios_git_flow/","title":"Git Flow","text":""},{"location":"teams/ios/ios_git_flow/#git-flow","title":"Git Flow","text":""},{"location":"teams/ios/ios_git_flow/#branches","title":"Branches","text":"<p>We use <code>develop</code> as the main branch to which the development increments (pull requests) are being integrated.</p> <p>The <code>main</code> branch is the stable branch, keeping the most recently released version. Each merge to <code>main</code> should be appropriately tagged with build number of the release (see Release).</p> <p>Feature branches, prefixed with <code>feature/</code>, are used to implement one specific feature defined in Jira task. When a feature is merged and a fix is required by Jira task (eg. from tester), a <code>fix/</code> branch is used. Similarly, a <code>hotfix/</code> branch is used if urgent fix of a released version is needed and should be merged only to the <code>main</code> branch.</p> <p>Branches prefixed with <code>feature/</code>, <code>fix/</code> and <code>hotfix/</code> require Jira task ID and a short description, as defined by the following regular expression <code>(feature|hotfix|fix)\\/([A-Z]{2,}-\\d+)</code>.</p> <p>For housekeep commits such as a dependency update, a <code>housekeep/</code> branch should be used. Releases should be prepared in a <code>release/</code> branch, which should then be merged to <code>main</code>.</p> <p><code>main</code> and <code>develop</code> branches are protected and merging to them is only available using the pull request.</p> <p>Examples of pretty branch names:</p> <ul> <li><code>feature/JIRA-00-chat-screen</code></li> <li><code>fix/JIRA-00-sending-messages</code></li> <li><code>release/v0.0.0-0</code></li> <li><code>housekeep/dependencies</code></li> <li><code>hotfix/JIRA-00-crash-on-launch</code></li> </ul>"},{"location":"teams/ios/ios_git_flow/#commits","title":"Commits","text":"<p>Commit messages should be in the imperative present tense, start with a capital letter and have no period at the end. Keep your commits short. For more guidance read this blog post.</p> <pre><code>// Preferred\nAdd employee avatar in list of employees\n\n// Not preferred\nAdded image view to display image for employee in employees table view controller.\n</code></pre>"},{"location":"teams/ios/ios_git_flow/#pull-requests","title":"Pull requests","text":"<p>All pull request should point to <code>develop</code> branch, except <code>release/</code> and <code>hotfix/</code>, which are intended to <code>main</code>.</p> <p>Attachments and more detailed information about the PR is welcomed, such as:</p> <ul> <li>A screenshot of an UI, if PR implements or fixes it</li> <li>A gif image if an animation is part of the PR</li> <li>Text description of what reviewers should pay attention to during code review</li> </ul>"},{"location":"teams/ios/ios_git_flow/#code-review","title":"Code review","text":"<p>Code review is obligatory before merging the pull request. A pull request should get at least one approval from another member of a team to get merged. If possible, cross-reviewing from a member of a different team is preferred.</p> <p>While doing code review, be nice and respect the work of another team member. Pay attention to the functional, structural and style issues. GitHub offers some of a good advice on offering and responding to feedback in their blog post.</p>"},{"location":"teams/ios/ios_git_flow/#continuous-integration","title":"Continuous Integration","text":"<p>Another required part to merge a PR is successful build on the CI. Pull request with failing build is not possible to merge. CI also sends Danger report to the PR, which checks both git flow rules enforcements and code style issues. Danger rules in use on our projects are available in futuredapp/danger repository.</p> <p>Danger reports issues and errors. Errors must be fixed before merging the PR, issues are strongly recommended to fix.</p>"},{"location":"teams/ios/ios_localization/","title":"Localization","text":""},{"location":"teams/ios/ios_localization/#localization","title":"Localization","text":"<p>For localization, we use a shared Google Docs spreadsheet and the ACKLocalization library to download the strings into the project.</p>"},{"location":"teams/ios/ios_localization/#how-to-setup-localization","title":"How to setup localization","text":"<ol> <li> <p>Create a copy of the following template and move it to your project folder here</p> <ul> <li>you need to be a member of Futured to access the second link</li> <li>if you don't see the project folder, create it</li> <li>please use lowerCamelCase for iOS keys to make searching within the project easier</li> </ul> </li> <li> <p>Set the sharing permissions to Anyone on the internet with this link can view</p> <p></p> </li> <li> <p>Set up the integration into the project</p> <ul> <li>add the ACKLocalization library via SPM, you don't need to add it to any target</li> <li> <p>add a <code>localization.json</code> file to the project's root:</p> <pre><code>{\n    \"destinationDir\": \"{project_folder}/Resources/Localization\",\n    \"keyColumnName\": \"key_ios\",\n    \"languageMapping\": {\n        \"EN\": \"en\",\n        \"CS\": \"cs\",\n        \"SK\": \"sk\"\n    },\n    \"apiKey\": \"{spreadsheet_api_key}\",\n    \"spreadsheetID\": \"{spreadsheet_id}\",\n    \"stringsFileName\": \"Localizable.strings\",\n    \"spreadsheetTabName\": \"Translations\"\n}\n</code></pre> <p><code>spreadsheet_api_key</code> - you will find it in Futured's Bitwarden under Spreadsheet localizer service account entry</p> <p><code>spreadsheet_id</code> - copy it from your spreadsheet's URL</p> <p></p> </li> </ul> </li> <li> <p>In your Xcode project:</p> <ul> <li> <p>create a new Aggregate target  for downloading the strings and name it <code>Localization</code></p> <p> </p> </li> <li> <p>in its Build Phases, add a New Run Script Phase</p> <p></p> </li> <li> <p>paste the path to the library and uncheck the <code>Based on dependency analysis</code> checkbox</p> <p>For standart project: </p><pre><code>xcrun --sdk macosx swift run --package-path \"${BUILD_DIR%Build/*}/SourcePackages/checkouts/ACKLocalization\" ACKLocalization\n</code></pre><p></p> <p>For localization in local Swift package: </p><pre><code>xcrun --sdk macosx swift run --package-path \"$SRCROOT/{package_folder}\" ACKLocalization\n</code></pre> <code>packages_folder</code> - the path to your local Swift packages folder<p></p> <p></p> </li> <li> <p>run the Localization target  - you should see the new localization files upon successful completion</p> </li> </ul> </li> <li> <p>Kudos to our colleagues from Ackee \ud83d\udda4</p> </li> </ol>"},{"location":"teams/ios/ios_new_project/","title":"New Project","text":""},{"location":"teams/ios/ios_new_project/#new-project","title":"New Project","text":"<ol> <li> <p>Create a new GitHub repository</p> Steps <ul> <li> <p>open iOS project template and click <code>Use this template</code> -&gt; <code>Create a new repository</code></p> <p></p> </li> <li> <p>fill new repository info</p> <p></p> <ol> <li>change owner to <code>futuredapp</code></li> <li>preffered repo name is [product-name]-[platform], where [product-name] includes only name of the product, without client name (like Skoda))</li> <li>change repo visibility to <code>private</code></li> <li>click <code>Create repository</code> button</li> </ol> </li> <li> <p>you will be redirected to the new repo in couple of seconds</p> </li> <li> <p>in newly created repo:</p> <p></p> <ol> <li>click <code>Settings</code> button</li> <li> <p>edit default branch name -&gt;\u00a0rename it to <code>develop</code></p> <p></p> </li> <li> <p>disable <code>Wikis</code> (we do not use it)</p> </li> <li>disable <code>Issues</code> (we do not use it)</li> <li>disable <code>Projects</code> (we do not use it)</li> <li>enable <code>Allow auto-merge</code></li> <li>enable <code>Automatically delete head branches</code> (there is no need to delete branches manually after each PR merge)</li> <li> <p>select <code>Rules</code> section</p> <ol> <li>select <code>Rulesets</code> subsection</li> <li>click <code>New ruleset</code> button</li> <li> <p>click <code>New branch ruleset</code> option from dropdown</p> <p></p> </li> </ol> </li> <li> <p>set new branch ruleset</p> <p></p> <ol> <li>fill <code>default branch protection</code> to <code>Ruleset Name</code></li> <li> <p>change <code>Enforcement status</code> to <code>Active</code></p> <p></p> </li> <li> <p>click <code>Include default branch</code> to add default branch as target branch </p> <p> </p> </li> <li> <p>enable <code>Require a pull request before merging</code></p> <p></p> <ol> <li>set <code>Required approvals</code> to 1</li> <li>enable <code>Dismiss stale pull request approvals when new commits are pushed</code></li> </ol> </li> <li> <p>keep <code>Require status checks to pass</code> unchecked for the moment (we'll set it up later)</p> <ul> <li>don't forget to add the <code>test</code> action rule after opening your first PR (actions will appear in the list after their first run)</li> </ul> <p></p> </li> <li> <p>click <code>Create</code> button, new ruleset appears in the list</p> <p></p> </li> </ol> </li> </ol> </li> </ul> </li> <li> <p>Configure Ruby environment and Fastlane</p> Steps <ul> <li>clone your project's repo</li> <li> <p>create a new branch <code>feature/PROJ-1-Setup-project</code> where everything will be set up in next steps</p> <ul> <li>PROJ is your project Jira identificator</li> <li>1 is Jira task number (if you don't have Jira yet ask your PM)</li> </ul> </li> <li> <p>if you haven't setup ruby on your machine yet</p> <ul> <li>follow manual steps of this tutorial</li> <li>install bundler from Terminal with <code>gem install bundler</code></li> </ul> </li> <li> <p>in project folder</p> <ul> <li>edit <code>fastlane/Fastfile</code> to specify environment variables - see CI/CD manual</li> </ul> </li> <li> <p>in Terminal</p> <ul> <li>switch to repo root folder</li> <li>call <code>bundle install</code> to install gems</li> </ul> </li> </ul> </li> <li> <p>Create app in Apple Developer and App Store Connect portals</p> Steps <ul> <li> <p>create app in Apple Developer and App Store Connect portals</p> <p>App Store Connect 2FA</p> <p>If you need a 2FA code for <code>ops@futured.app</code> account when running the following Fastlane commands, please contact someone from the iOS team for assistance.</p> App released from customer's ASC account <p>If you filled customer's environment variables in Fastfile</p> <ul> <li> <p>call <code>bundle exec fastlane create_apps</code></p> <ul> <li>if it's the first app for the account append <code>company_name:\"My Company Inc\"</code> parameter</li> </ul> </li> <li> <p>call <code>bundle exec fastlane update_provisioning include_release:true create_branch:true</code></p> <ul> <li><code>create_branch:true</code> parameter is needed only for the first time to create customer branch in our Apple certificates repo </li> </ul> </li> </ul> App released from Futured's ASC account <ul> <li>call <code>bundle exec fastlane create_apps</code></li> <li>call <code>bundle exec fastlane update_provisioning include_release:true</code></li> </ul> The app's release account is currently unknown <p>You can setup release account later</p> <ul> <li>call <code>bundle exec fastlane create_apps skip_release_app:true</code></li> <li>call <code>bundle exec fastlane update_provisioning</code></li> </ul> <p>Once you're familiar with the release process, rerun the above command (no need to worry about duplication)</p> </li> </ul> </li> <li> <p>Create a new Xcode project</p> Steps <ul> <li> <p>install <code>FuturedArchitecture</code> project template (if you haven\u2019t done so yet)</p> <ul> <li>paste the following script to Terminal and press enter <pre><code>bash &lt;&lt; 'EOF'\n#!/bin/bash\n\necho \"Cloning repository...\"\ngit clone --depth=1 git@github.com:futuredapp/FuturedKit.git\n\necho \"Running make...\"\n(cd FuturedKit/Templates &amp;&amp; make)\n\necho \"Cleaning up...\"\nrm -rf FuturedKit\n\necho \"Done!\"\nEOF\n</code></pre></li> </ul> </li> <li> <p>open Xcode (or close and open again for refresh templates) and select<code>File</code> -&gt; <code>New</code> -&gt; <code>Project</code></p> <p></p> </li> <li> <p>select <code>iOS</code> tab and <code>SwiftUI App</code> from <code>FuturedArchitecture</code> and click <code>Next</code> button</p> <p></p> </li> <li> <p>fill the project info and click <code>Next</code> button</p> <ul> <li>write product name in CamelCased style</li> <li>organization identifier is <code>app.futured</code></li> <li>leave Include Tests checked (CI requires tests run)</li> </ul> <p></p> </li> <li> <p>choose your repo folder and click <code>Create</code> button</p> <ul> <li>Xcode project will open</li> <li>close it and check the project's folder</li> <li>move content of <code>{ProjectName}</code> folder to the repo root (you need to rename it first to be able to move the content)</li> <li>delete <code>{ProjectName}</code> folder</li> <li>open Xcode project again</li> </ul> <p></p> </li> <li> <p>in Xcode:</p> <ul> <li> <p>change bundle identifier to kebab-cased style <code>app.futured.kebab-case-app-name</code></p> <ol> <li>select <code>root</code></li> <li>select main project target</li> <li>select\u00a0<code>Signing &amp; Capabilities</code> tab</li> <li>change bundle id for all configurations</li> </ol> <p></p> </li> <li> <p>setup Futured's architecture</p> <ul> <li> <p>add <code>FuturedKit</code> package dependency - https://github.com/futuredapp/FuturedKit.git</p> <p></p> </li> <li> <p>add <code>FuturedArchitecture</code> to main project target</p> </li> <li> <p>optionally add <code>FuturedHelpers</code> to main project target if needed - see docs</p> <p></p> </li> <li> <p>go to the <code>{project_name}App.swift</code> file and remove error at line 10</p> <pre><code>#error(\"Add https://github.com/futuredapp/FuturedKit.git to the project!\")\n</code></pre> <p></p> </li> <li> <p>select <code>Issue navigator</code>, click the <code>Macro target ...</code> warning and then click <code>Trust &amp; Enable</code> button</p> <p></p> </li> </ul> </li> <li> <p>add SwiftLint</p> <ul> <li>if you don't have installed SwiftLint locally call <code>brew install swiftlint</code> from Terminal</li> <li>go to <code>Build Phases</code> tab</li> <li>click <code>+</code> button</li> <li>click <code>New Run Script Phase</code></li> <li>rename phase to <code>SwiftLint</code> and move it before <code>Compile sources</code> phase</li> <li>paste script bellow</li> </ul> <pre><code>if test -d \"/opt/homebrew/bin/\"; then\n  PATH=\"/opt/homebrew/bin/:${PATH}\"\nfi\n\nexport PATH\n\nif which swiftlint &gt;/dev/null; then\n    swiftlint --fix # remove `swiftlint --fix` if you want to fix linting issues manually\n    swiftlint\nelse\n    echo \"error: SwiftLint not installed, run: brew install swiftlint\"\nfi\n</code></pre> <p> </p> <ul> <li>disable <code>User Script Sandboxing</code> in <code>Build Settings</code></li> </ul> <p></p> </li> <li> <p>configure the project for Continuous Deployment</p> <ul> <li> <p>set proper values in <code>Versioning</code> part of <code>Build Settings</code></p> <ul> <li>select all targets and remove <code>Marketing Version</code> value by pressing <code>Delete</code> button on keyboard (<code>Marketing Version</code> text will change from bold to normal)</li> <li>select project and fill <code>1.0.0</code> as <code>Marketing Version</code></li> </ul> <p> </p> </li> <li> <p>select appropriate provisioning profiles for all configurations in the Target's Signing &amp; Capabilities tab</p> <p></p> </li> </ul> </li> <li> <p>build the project</p> </li> </ul> </li> </ul> </li> <li> <p>Open pull request with the project setup</p> Steps <ul> <li> <p>update <code>.github/CODEOWNERS</code> file</p> <ul> <li>change <code>@futuredapp/ios</code> to <code>@{github_username}</code> of teammate/teammates (or person who will perform code reviews)</li> </ul> </li> <li> <p>update project README and fill in all the strike-through points</p> </li> <li>commit everything and open PR</li> <li> <p>after CI checks the PR, <code>test</code> check is now available to be added in <code>default branch protection</code> ruleset</p> <ul> <li>add <code>test/test</code> check</li> </ul> <p></p> <ul> <li>added check looks like this</li> </ul> <p></p> </li> </ul> </li> <li> <p>Enjoy!</p> </li> </ol> Tip <p>Check the Accessibility Basics to conform new project to EAA</p>"},{"location":"teams/ios/ios_release/","title":"Release","text":""},{"location":"teams/ios/ios_release/#release","title":"Release","text":""},{"location":"teams/ios/ios_release/#what-to-check-before-every-release","title":"What to check before every release","text":"<ul> <li>update from previous version (data migration, no unnecessary logouts).</li> <li>demo account (will Apple review be able to access most parts of the app if it requires login?)</li> <li>release notes (every version should have different release notes)</li> <li>visually check screenshots if they are up-to-date</li> </ul>"},{"location":"teams/ios/ios_release/#source-control-steps-to-release","title":"Source control steps to release","text":"<ul> <li>in GitHub project repo, go to <code>Code</code> -&gt; <code>Releases</code></li> <li> <p>click <code>Draft a new release</code> button</p> <p></p> </li> <li> <p>draft a new release from default branch:</p> <ol> <li>create a tag which represents desired version number (don't use any prefix or sufix, keep <code>x.y.z</code> format, CI uses it for versioning)</li> <li>generate release notes</li> <li>click <code>Publish release</code> button</li> </ol> <p> </p> </li> <li> <p>publishing release will automatically run GitHub release action</p> </li> <li>when build is processed to App Store Connect, let the tester go through it and ideally go through it yourself too</li> <li>only when tester approves the build, proceed with sending the update to the review</li> </ul>"},{"location":"teams/qa/qa_page/","title":"QA Page","text":""},{"location":"teams/qa/qa_page/#qa-page","title":"QA Page","text":"<p>Here you can find how our QA team works!</p>"}]}